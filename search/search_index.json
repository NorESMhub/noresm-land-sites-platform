{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the NorESM Land Sites Platform User guide Technical documentation Sites About us Contributing and Code of Conduct The NorESM-LSP software allows anyone to run simple, offline, single-site simulations with the demographic dynamic global vegetation model NorESM - CLM - FATES . Our aim is to improve access to this process-based modelling framework. The software is free and open, and might be used ... In education, such as interdisciplinary workshops or data labs in Ecological Climatology-related university courses, where model experiments will typically be simple and designed to increase understanding of the model framework and Earth System Science. By beginner modelers, e.g. post-graduate students or scientists who are new to CLM-FATES modelling, to set up scientific model experiments under the supervision of or in collaboration with more experienced modelers. By experienced modelers without access to HPC clusters with the models installed, who benefit from the containerisation of the model. Model experiments with CLM-FATES simulate potential vegetation. What ecosystem would appear where you are right now, in the absence of human land use?","title":"Home"},{"location":"#welcome-to-the-noresm-land-sites-platform","text":"User guide Technical documentation Sites About us Contributing and Code of Conduct The NorESM-LSP software allows anyone to run simple, offline, single-site simulations with the demographic dynamic global vegetation model NorESM - CLM - FATES . Our aim is to improve access to this process-based modelling framework. The software is free and open, and might be used ... In education, such as interdisciplinary workshops or data labs in Ecological Climatology-related university courses, where model experiments will typically be simple and designed to increase understanding of the model framework and Earth System Science. By beginner modelers, e.g. post-graduate students or scientists who are new to CLM-FATES modelling, to set up scientific model experiments under the supervision of or in collaboration with more experienced modelers. By experienced modelers without access to HPC clusters with the models installed, who benefit from the containerisation of the model. Model experiments with CLM-FATES simulate potential vegetation. What ecosystem would appear where you are right now, in the absence of human land use?","title":"Welcome to the NorESM Land Sites Platform"},{"location":"about/","text":"The NorESM Land Sites Platform Scientific paper DOI: https://doi.org/10.1111/gcb.16808 Code DOI: https://doi.org/10.5281/zenodo.7304386 The NorESM Land Sites Platform (LSP for short) aims to facilitate site-level simulations over land using NorESM and its land component CTSM with the developing vegetation demographic module FATES . The platform aims to lower the technical barriers to vegetation demographic modelling with NorESM-CLM-FATES. In doing so, we aim to help bridge the gaps between observations and modelling, promote the usage of site-level observations to test, validate and improve the models and its land component, and to promote the usage of NorESM-CLM-FATES to new audiences and research settings. The observation sites currently included in the platform are described in the Sites page. Development team Kaveh Karimi Lasse Torben Keetz Eva Lieungh Hui Tang Emiliano Gelati Stefanie Falk Sunniva Indrehus Anne Fouilloux Yeliz Yilmaz Elin Aas Peter Horvath Kjetil Aas Devaraju Narayanappa Sonya Geange Inge Althuizen Anders Bryn Hanna Lee Frans-Jan Parmentier Norbert Pirk Vigdis Vandvik Ane Vollsnes Olav Skarpaas Frode Stordal Lena M. Tallaksen Supporting projects EMERALD LATICE and LATICE-X SeedClim LandPress THREE-D INES EOSC-Nordic Acknowledgements The NorESM-LSP has evolved over several years from the needs and visions of a large group of researchers and students connected through the EMERALD and LATICE projects. Funding has come from the projects listed above. Thanks are due to everyone who participated along the way in discussions, feedback, and testing of early versions. The NorESM-LSP software wraps around the NorESM-CLM-FATES model framework. The Norwegian Earth System Model is developed by a consortium , and is closely related to the Community Earth System Model (CESM). The CESM and Community Land Model (CLM) are supported primarily by the U.S. National Science Foundation. The FATES model is supported primarily by the U.S. Department of Energy\u2019s Next Generation Ecosystem Experiment - Tropics (NGEE-T) project. How to cite If you publish something based on simulations through the LSP, please cite the software in your publication. You can use this citation for the peer-reviewed paper describing the LSP as Keetz & Lieungh et al. (2023): Keetz, L. T., Lieungh, E., Karimi-Asli, K., Geange, S. R., Gelati, E., Tang, H., Yilmaz, Y. A., Aas, K. S., Althuizen, I. H. J., Bryn, A., Falk, S., Fisher, R., Fouilloux, A., Horvath, P., Indrehus, S., Lee, H., Lombardozzi, D., Parmentier, F.-J., Pirk, N. \u2026 Tallaksen, L. M. (2023). Climate\u2013ecosystem modelling made easy: The Land Sites Platform. Global Change Biology, 00, 1\u2013 13. https://doi.org/10.1111/gcb.16808 The webpage with technical documentation can be cited as: The NorESM-LSP development team. 2022, [month day]. NorESM Land Sites Platform technical documentation. https://noresmhub.github.io/noresm-land-sites-platform/ . Each individual repository has Zenodo records with DOIs and citation instructions, in case you need to refer to them separately. NB! The NorESM-LSP software wraps around the model framework. When you publish model experiments, you also need to properly cite and acknowledge the models: See the licences of NorESM , CLM , FATES . In the Acknowledgements section, it is common practice to add the main funding information of the models that you use (e.g. the U.S. National Science Foundation for CLM, NGEE-Tropics for FATES). The main publications for each model should also be cited in the main text. NB! If you use observational data, e.g. from the Vestland Climate Grid sites or another integrated site, make sure to look at the licences, rights and conditions attached to those data as well! Following international standards for research ethics, authorship invitations should be given based on 'substantial contributions to conception and design, acquisition of data, or analysis and interpretation of data', among other things. See for instance the ICMJE authorship guidelines (Vancouver convention) to help you decide which kind of acknowledgement is appropriate. Similarly, if an LSP developer helped you substantially, please consider adding that person to the Acknowledgements section of your publication or invite them to co-author your publication if the contribution is substantial enough. Contact For questions about the platform, please open an issue on GitHub or get in touch with one of the developers directly.","title":"About"},{"location":"about/#the-noresm-land-sites-platform","text":"Scientific paper DOI: https://doi.org/10.1111/gcb.16808 Code DOI: https://doi.org/10.5281/zenodo.7304386 The NorESM Land Sites Platform (LSP for short) aims to facilitate site-level simulations over land using NorESM and its land component CTSM with the developing vegetation demographic module FATES . The platform aims to lower the technical barriers to vegetation demographic modelling with NorESM-CLM-FATES. In doing so, we aim to help bridge the gaps between observations and modelling, promote the usage of site-level observations to test, validate and improve the models and its land component, and to promote the usage of NorESM-CLM-FATES to new audiences and research settings. The observation sites currently included in the platform are described in the Sites page.","title":"The NorESM Land Sites Platform"},{"location":"about/#development-team","text":"Kaveh Karimi Lasse Torben Keetz Eva Lieungh Hui Tang Emiliano Gelati Stefanie Falk Sunniva Indrehus Anne Fouilloux Yeliz Yilmaz Elin Aas Peter Horvath Kjetil Aas Devaraju Narayanappa Sonya Geange Inge Althuizen Anders Bryn Hanna Lee Frans-Jan Parmentier Norbert Pirk Vigdis Vandvik Ane Vollsnes Olav Skarpaas Frode Stordal Lena M. Tallaksen","title":"Development team"},{"location":"about/#supporting-projects","text":"EMERALD LATICE and LATICE-X SeedClim LandPress THREE-D INES EOSC-Nordic","title":"Supporting projects"},{"location":"about/#acknowledgements","text":"The NorESM-LSP has evolved over several years from the needs and visions of a large group of researchers and students connected through the EMERALD and LATICE projects. Funding has come from the projects listed above. Thanks are due to everyone who participated along the way in discussions, feedback, and testing of early versions. The NorESM-LSP software wraps around the NorESM-CLM-FATES model framework. The Norwegian Earth System Model is developed by a consortium , and is closely related to the Community Earth System Model (CESM). The CESM and Community Land Model (CLM) are supported primarily by the U.S. National Science Foundation. The FATES model is supported primarily by the U.S. Department of Energy\u2019s Next Generation Ecosystem Experiment - Tropics (NGEE-T) project.","title":"Acknowledgements"},{"location":"about/#how-to-cite","text":"If you publish something based on simulations through the LSP, please cite the software in your publication. You can use this citation for the peer-reviewed paper describing the LSP as Keetz & Lieungh et al. (2023): Keetz, L. T., Lieungh, E., Karimi-Asli, K., Geange, S. R., Gelati, E., Tang, H., Yilmaz, Y. A., Aas, K. S., Althuizen, I. H. J., Bryn, A., Falk, S., Fisher, R., Fouilloux, A., Horvath, P., Indrehus, S., Lee, H., Lombardozzi, D., Parmentier, F.-J., Pirk, N. \u2026 Tallaksen, L. M. (2023). Climate\u2013ecosystem modelling made easy: The Land Sites Platform. Global Change Biology, 00, 1\u2013 13. https://doi.org/10.1111/gcb.16808 The webpage with technical documentation can be cited as: The NorESM-LSP development team. 2022, [month day]. NorESM Land Sites Platform technical documentation. https://noresmhub.github.io/noresm-land-sites-platform/ . Each individual repository has Zenodo records with DOIs and citation instructions, in case you need to refer to them separately. NB! The NorESM-LSP software wraps around the model framework. When you publish model experiments, you also need to properly cite and acknowledge the models: See the licences of NorESM , CLM , FATES . In the Acknowledgements section, it is common practice to add the main funding information of the models that you use (e.g. the U.S. National Science Foundation for CLM, NGEE-Tropics for FATES). The main publications for each model should also be cited in the main text. NB! If you use observational data, e.g. from the Vestland Climate Grid sites or another integrated site, make sure to look at the licences, rights and conditions attached to those data as well! Following international standards for research ethics, authorship invitations should be given based on 'substantial contributions to conception and design, acquisition of data, or analysis and interpretation of data', among other things. See for instance the ICMJE authorship guidelines (Vancouver convention) to help you decide which kind of acknowledgement is appropriate. Similarly, if an LSP developer helped you substantially, please consider adding that person to the Acknowledgements section of your publication or invite them to co-author your publication if the contribution is substantial enough.","title":"How to cite"},{"location":"about/#contact","text":"For questions about the platform, please open an issue on GitHub or get in touch with one of the developers directly.","title":"Contact"},{"location":"contributing/","text":"How to contribute to the NorESM land sites platform The NorESM land sites platform is developed by a group of students, postdocs, and research software engineers when we have the time or need certain functionalities. We welcome anyone to join us in developing new functionalities, using the platform, add to the documentation, and contribute to making this platform a dynamic and useful research and teaching tool. If you have questions, comments, or suggestions for improvements, please open an issue in the repository. Any use, contribution, and involvement in our community must be in line with our Code of conduct . How to contribute to the code We use GitHub for developing code. If you are new to working with Git and GitHub, you might like this or this tutorial. Quick links to GitHub repositories NorESMhub/noresm-land-sites-platform NorESMhub/noresm-lsp-ui NorESMhub/noresm-lsp-data NorESMhub/ctsm-api NorESMhub/NorESM ( NorESMhub/noresm-lsp-input for legacy mathod of creating input data for integrated sites) The current version of the platform is kept in the main branch of the noresm-land-sites-platform repository. Out first release tag of a functioning version (without GUI and API) is stored in the archive branch, and a version with different (manual) way of creating input data is stored in the legacy branch/tag. Further development happens on individual forks and a develop branch that can be merged into main with a Pull Request when the changes are functioning and tested. If you are developing code, please fork the repository and make your changes there before creating a pull request to the develop branch (or to main if you are confident the changes are complete and don't break anything). Make sure you update the documentation as well (if relevant). If you contribute to the code, add yourself to the creators list in the .zenodo.json file at the root of NorESMhub/noresm-land-sites-platform . This will update the metadata sent to Zenodo in the next release of the LSP. If you have questions or comments about the platform, please open an issue issue in the repository. How to contribute to the documentation This documentation page is built using GitHub pages and MkDocs . To update it, change markdown files under /docs and commit the changes (or open a pull request). When the changes are saved, the page must be built again to fetch the changes. This is done automatically when changes are pushed/committed to main by a github Action. Alternatively, you can build the pages by using the mkdocs gh-deploy command in the top folder of the repository where mkdocs.yml tells github pages how to build the markdown files into a static webpage. See Mkdocs docs deployment for further info. How to contribute new sites New sites can be integrated (added permanently) to the LSP by creating and uploading the necessary input data. See instructions in NorESMhub/ctsm-api/data . Note that you need huge amounts of storage space (the global data repository is >10 TByte!) to subset the data, so this can not be done on a normal pc. If you want to contribute a new site, but struggle to make the changes yourself, please ask a developer and we will do our best to help you. Code of conduct Our Pledge We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community. Our Standards Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Scientific Use and Publication Ethics We aim to create an open development environment where scientists can be confident that all members of the community are conducting research in an ethical manner. In particular, writing scientific code is a form of intellectual contribution, and one should expect that all such intellectual contributions are respected and given credit in any resulting published scientific work. To support the community and avoid issues of scientific misconduct related to the above principle, please respect the following rules: Document the version of the platform and models used in any publication, preferably by using a release tag (existing or newly created) if possible, or a commit hash if not. Do not use code without checking the license or discussing with the author(s) your intentions for using the code and receiving their permission to do so. When using model features that have recently been integrated into this or the central NorESM/CLM/FATES development repositories, be mindful of the contributions of others and, where the novel features qualitatively affect the results of a given simulation, involve the author(s) of these features in any resulting manuscripts. Be particularly aware of the concerns of early career researchers, and ensure they have sufficient opportunities to lead publications using their developments. When discussing results arising from older model features that have been described in the literature, accurately cite the publications describing those features or releases. Enforcement Responsibilities Community leaders should clarify and enforce our standards of acceptable behavior and take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate. Scope This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Enforcement All community leaders are obligated to respect the privacy and security of the reporter of any incident. Consequences for any action deemed to violate this Code of Conduct, enforced by community leaders, may be: Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community. Attribution This Code of Conduct is adapted from the Contributor Covenant, version 2.1 , and the FATES Code of Conduct .","title":"Contributing & code of conduct"},{"location":"contributing/#how-to-contribute-to-the-noresm-land-sites-platform","text":"The NorESM land sites platform is developed by a group of students, postdocs, and research software engineers when we have the time or need certain functionalities. We welcome anyone to join us in developing new functionalities, using the platform, add to the documentation, and contribute to making this platform a dynamic and useful research and teaching tool. If you have questions, comments, or suggestions for improvements, please open an issue in the repository. Any use, contribution, and involvement in our community must be in line with our Code of conduct .","title":"How to contribute to the NorESM land sites platform"},{"location":"contributing/#how-to-contribute-to-the-code","text":"We use GitHub for developing code. If you are new to working with Git and GitHub, you might like this or this tutorial.","title":"How to contribute to the code"},{"location":"contributing/#quick-links-to-github-repositories","text":"NorESMhub/noresm-land-sites-platform NorESMhub/noresm-lsp-ui NorESMhub/noresm-lsp-data NorESMhub/ctsm-api NorESMhub/NorESM ( NorESMhub/noresm-lsp-input for legacy mathod of creating input data for integrated sites) The current version of the platform is kept in the main branch of the noresm-land-sites-platform repository. Out first release tag of a functioning version (without GUI and API) is stored in the archive branch, and a version with different (manual) way of creating input data is stored in the legacy branch/tag. Further development happens on individual forks and a develop branch that can be merged into main with a Pull Request when the changes are functioning and tested. If you are developing code, please fork the repository and make your changes there before creating a pull request to the develop branch (or to main if you are confident the changes are complete and don't break anything). Make sure you update the documentation as well (if relevant). If you contribute to the code, add yourself to the creators list in the .zenodo.json file at the root of NorESMhub/noresm-land-sites-platform . This will update the metadata sent to Zenodo in the next release of the LSP. If you have questions or comments about the platform, please open an issue issue in the repository.","title":"Quick links to GitHub repositories"},{"location":"contributing/#how-to-contribute-to-the-documentation","text":"This documentation page is built using GitHub pages and MkDocs . To update it, change markdown files under /docs and commit the changes (or open a pull request). When the changes are saved, the page must be built again to fetch the changes. This is done automatically when changes are pushed/committed to main by a github Action. Alternatively, you can build the pages by using the mkdocs gh-deploy command in the top folder of the repository where mkdocs.yml tells github pages how to build the markdown files into a static webpage. See Mkdocs docs deployment for further info.","title":"How to contribute to the documentation"},{"location":"contributing/#how-to-contribute-new-sites","text":"New sites can be integrated (added permanently) to the LSP by creating and uploading the necessary input data. See instructions in NorESMhub/ctsm-api/data . Note that you need huge amounts of storage space (the global data repository is >10 TByte!) to subset the data, so this can not be done on a normal pc. If you want to contribute a new site, but struggle to make the changes yourself, please ask a developer and we will do our best to help you.","title":"How to contribute new sites"},{"location":"contributing/#code-of-conduct","text":"","title":"Code of conduct"},{"location":"contributing/#our-pledge","text":"We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation. We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.","title":"Our Pledge"},{"location":"contributing/#our-standards","text":"Examples of behavior that contributes to a positive environment for our community include: Demonstrating empathy and kindness toward other people Being respectful of differing opinions, viewpoints, and experiences Giving and gracefully accepting constructive feedback Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience Focusing on what is best not just for us as individuals, but for the overall community Examples of unacceptable behavior include: The use of sexualized language or imagery, and sexual attention or advances of any kind Trolling, insulting or derogatory comments, and personal or political attacks Public or private harassment Publishing others\u2019 private information, such as a physical or email address, without their explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"contributing/#scientific-use-and-publication-ethics","text":"We aim to create an open development environment where scientists can be confident that all members of the community are conducting research in an ethical manner. In particular, writing scientific code is a form of intellectual contribution, and one should expect that all such intellectual contributions are respected and given credit in any resulting published scientific work. To support the community and avoid issues of scientific misconduct related to the above principle, please respect the following rules: Document the version of the platform and models used in any publication, preferably by using a release tag (existing or newly created) if possible, or a commit hash if not. Do not use code without checking the license or discussing with the author(s) your intentions for using the code and receiving their permission to do so. When using model features that have recently been integrated into this or the central NorESM/CLM/FATES development repositories, be mindful of the contributions of others and, where the novel features qualitatively affect the results of a given simulation, involve the author(s) of these features in any resulting manuscripts. Be particularly aware of the concerns of early career researchers, and ensure they have sufficient opportunities to lead publications using their developments. When discussing results arising from older model features that have been described in the literature, accurately cite the publications describing those features or releases.","title":"Scientific Use and Publication Ethics"},{"location":"contributing/#enforcement-responsibilities","text":"Community leaders should clarify and enforce our standards of acceptable behavior and take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful. Community leaders have the right to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.","title":"Enforcement Responsibilities"},{"location":"contributing/#scope","text":"This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.","title":"Scope"},{"location":"contributing/#enforcement","text":"All community leaders are obligated to respect the privacy and security of the reporter of any incident. Consequences for any action deemed to violate this Code of Conduct, enforced by community leaders, may be: Correction Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community. Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested. Warning Community Impact: A violation through a single incident or series of actions. Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban. Temporary Ban Community Impact: A serious violation of community standards, including sustained inappropriate behavior. Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban. Permanent Ban Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals. Consequence: A permanent ban from any sort of public interaction within the community.","title":"Enforcement"},{"location":"contributing/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant, version 2.1 , and the FATES Code of Conduct .","title":"Attribution"},{"location":"documentation/","text":"Technical documentation for the NorESM Land Sites Platform This page describes what the platform contains, how the input data were made, the main functionalities, and the model output. See the navigation panel on the left for our user guide , available sites , about us , and contribution guidelines and Code of Conduct . You can use the platform to run single-point model simulations from a browser on your local computer. We provide sites with input data (atmospheric forcing, land surface data), and analysis tools with example python code to plot some input and output data. Please let us know if you have questions, suggestions, or trouble using the platform by opening a new issue on GitHub. Introduction Links to NorESM-LSP GitHub repositories NorESMhub/noresm-land-sites-platform NorESMhub/noresm-lsp-ui NorESMhub/noresm-lsp-data NorESMhub/ctsm-api NorESMhub/NorESM ( NorESMhub/noresm-lsp-input for legacy method of creating input data for integrated sites) The main code is stored in the NorESMhub/noresm-land-sites-platform repository. The main branch stores the latest functioning version. Older versions can be accessed under Releases . This documentation page is made with GitHub pages ( gh-pages branch) and Mkdocs . To contribute to the code or documentation, see our Contributing instructions. There you will also find our Code of Conduct . Documentation of the model framework The model framework consists of the Norwegian Earth System Model (NorESM), the Community Land Model (CLM), and the Functionally Assembled Terrestrial Ecosystem Simulator (FATES). While the LSP version 1 only runs CLM-FATES, an earth system model (the NorESM) is necessary as software infrastructure. Notably, the coupler ( CIME ) contains a model driver and the infrastructure needed to create and control cases (see glossary ). An alternative to using NorESM could be CESM , which uses the same coupler and CLM as its land component. Each model has its own documentation and tutorials. See our page with links to external tutorials and resources for some recommendations on where to start learning more . Here are the central documentation pages and repositories for the respective models: FATES Technical documentation and user guide GitHub repository CLM Technical documentation and user guide GitHub repository NorESM Technical documentation and user guide GitHub repository Glossary of technical terms Software engineering terms Term Definition API = Application Programming Interface An interface for computer programs to communicate with each other. It offers a service to other pieces of software. An API specification is a document or standard that describes how to build or use such a connection or interface. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. [Wikipedia] Container, Container image, Docker Containers are isolated, virtualized computer environments based on an image, a read-only file with source code, libraries, dependencies, and tools. Docker Inc. provides containers for free personal and educational use. See the Docker webpage and e.g. the CLASSIC model's containerisation description Git, GitHub, repository Git software enables version control by tracking changes in files. GitHub is an online host of repositories, i.e. data structures of files and their version history. GUI = Graphical User Interface An interface between humans and software or hardware, with clickable icons. The NorESM-LSP GUI is accessed after installation and setup at localhost:8080 in a browser, and lets users set up and run model experiments (simulations). Terminal A computer program where users interact with an operating system by typing in commands (as opposed to clicking and seeing programs in windows). Examples are Windows PowerShell and puTTy. [Wikipedia] Earth System Modelling terms Note that some terms may have slightly different definitions in different models. These definitions are written to be quite general but valid for the NorESM, CLM, and FATES models. Term Definition DGVM, FATES D ynamic G lobal V egetation M odels are computer programs that simulate vegetation. [Wikipedia] [Scheiter, Langan & Higgins, 2013] . The F uncionally A ssembled T errestrial E cosystem S imulator is a DGVM that works with CLM as a host model. FATES groups individuals into cohorts, has flexible PFT definitions, is deterministic, and lacks hardcoded climate thresholds for PFTs. [Fisher et al. 2015] [Fisher & Koven 2020] [Fisher et al. 2018] LSM, CLM/CTSM L and S urface M odels are computer programs that use quantitative methods to simulate the exchange of energy, water, and e.g. CO2 at the interface between the Earth's surface and atmosphere. The C ommunity L and M odel is an LSM, and part of the C ommunity T errestrial S ystem M odel (which also includes a river runoff model). ESM, NorESM E arth S ystem M odels are computer programs that simulate the exchanges of energy and material (water, carbon, etc.) in the Earth System, typically by combining sub-models for each major component of the Earth System: land surface, atmosphere, ocean, and ice. These component models include code representation of differential equations from e.g. physics and biogeochemistry, which are solved numerically as the model runs through a simulation from initial conditions. The Nor wegian E arth S ystem M odel is an ESM that is related to the Community Earth System Model but has different component models for e.g. ocean and atmosphere. Model coupling, CIME Eath System Model components can be coupled with infrastructure code such as C ommon I nfrastructure for M odelling the E arth (CIME) . When models are run in coupled mode, information about energy and matter are exchanged between the component models in a dynamic way that allows feedbacks in the system. Models operate with time steps, e.g. 30 mins or 3 hours or 1 year, when values calculated for the relevant processes are exchanged between components that can use that value for calculating changes in the next time step. Running a fully coupled ESM is computationally expensive. Stub, Data model Alternatives to running a model fully coupled can be to deactivate components (using component stubs ) or using a data set instead of dynamically calculating the values needed by the active model component. For instance, the NorESM-LSP uses the \"land-only mode\" of the model framework, where the land model (CLM) is active, the atmosphere component is replaced by data, and the ocean and ice components are deactivated stubs. PFT = Plant Functional Type Plant Functional Types are non-phylogenetic groups of plants, defined by a set of parameters. Parameters include e.g. leaf shape, deciduousness, growth form, allometry equation parameters, maximum specific leaf area, and minimum temperature tolerance. Cohort A group of individual trees of the same PFT and size. Patch Tile with a defined age since some disturbance (fire, logging). Forcing data Data that is not impacted by the model but provided as input, generally from observation data sets. Defines the necessary boundary conditions to the model, e.g. temperature and precipitation, throughout its simulation time. Versions Platform versions follow standard numbering, and releases below 1 should be considered unstable and preliminary. List of versions (newest on top): release 1 v0.2.0 (before user-mods) - for simulations with input data generated with NorESMhub/noresm-lsp-input repo. Use with legacy tags of ctsm-api and noresm-lsp-ui tag 0.1.0 (first draft with older model versions) archive tag (pre GUI and API) Model versions The platform is primarily designed to run the land model (CLM) with the Norwegian Earth System Model. The versions of FATES and CLM therefore have to be in line with stable NorESM versions. You can see the component model versions in the Externals.cfg file under /resources/overwrites/ in the noresm-land-sites-platform repository . Changing the model version To change the model versions, either to update the NorESM-LSP or on your own fork, there are two files to consider. The first is the NorESM version in the docker environment file ( noresm-land-sites-platform/docker/api/.env ), and the second (more important) is a file to overwrite the model component versions located in NorESM-land-sites-platform/resources/overwrites/Externals.cfg . The FATES version is defined in NorESM-land-sites-platform/resources/model/components/clm/Externals_CLM.cfg . To change the FATES version, you need to either run ./checkout_externals manually or alternatively point to a version of CTSM in Externals.cfg that uses the desired version of FATES. Software architecture The NorESM-LSP relies on Docker containers and an Application Programming Interface (API). The illustrations below show the relationship between containers and folders for case files, model settings and model files (Figure 1), and between all the NorESM GitHub repositories, Docker images, and containers (Figure 2). Figure 1: Illustration of the software architecture. The model container is expanded to show the two services running in there (i.e. API and Tasks ) in addition to hosting the model and its dependencies. ./resources contains all the folders that are mounted into the containers by docker-compose . The model and the API manage the ones on the left, and the folders on the right are created by the code maintainers -- an asterisk indicates the folder is optional. After first-time installation and setup , users can access the Web User Interface (UI) and Jupyter server. The UI uses an Application Programming Interface (API) to send commands between the users and containers. Figure 2: Illustration of the GitHub repositories and Docker images and containers that make up the NorESM Land Sites Platform. Dockerfiles in Github repositories are the basis of static Docker images (read-only files with source code, libraries, dependencies, and tools) that the containers (virtual computer environments where the models can run) can start from. Code in repositories is also sent directly to the containers. Docker containers and model dependencies CTSM and NorESM depend on many external libraries, which can be challenging to install on a personal computer. The difficulties can be due to a lack of cross-platform support, version conflict with existing libraries, or system architecture. One solution to this is containerization, which is the process of packaging and distributing software in a way that can be run on various platforms. Containers use Operating System-level virtualization. This allows efficient use of resources while isolating the software from other processes running on the host system. All the requirements for packaged software are included in the container. We used Docker for this purpose. Docker is a widely used and popular containerization tool. To create a container where model simulations can be run, we start with a Dockerfile to create an Image and then a Container (see Figure 2 above). The packaged software is called an Image. When a Docker Image is run, it is called a Container, i.e., a running instance of the software. The main Image created for the Platform is ctsm-api . It contains all the dependencies for the model, the scripts to initialize and configure the model, and the API code that provides access to the model. In order to allow easier maintenance and better use of resources, some dependencies are not included in the Image. For example, the message queuing broker (RabbitMQ) required by the API, which is needed to manage asynchronous communications between the model and the API, is not included. This service can be added by using the official RabbitMQ Docker Image . Keeping this service out of the Image lets more savvy users pick a different message broker for their use cases. To address the needs of non-technical users, we have taken care of the extra configurations for the containers by using an orchestration tool called Docker Compose . Docker Compose is a wrapper around Docker, which allows configuring and organizing all the containers in a single YAML file. In addition to the previously mentioned Images, we have included an Image for Jupyter Server and one for our Web User Interface (UI) for ctsm-api . The reason for using a container is that the NorESM model code is not an app but rather a collection of code, and that code needs to be modified in order to run on a new machine. To make the model more like a downloadable app for any machine (e.g. your mac/windows/linux laptop/pc), we put the code in a Docker container that works as a mini-machine within your machine (laptop/pc). A Dockerfile is used to direct the docker engine in the construction of Docker images. When we release a new version, we have to build a new Docker image using this Dockerfile. Users can then download the image and build a new container to run simulations there. Stability and performance We tested the software ( LSP v1.0.0 ) on machines with different operating systems and hardware specifications. They all ran an identical default 100-year model experiment, which we created with the following API request: curl -X 'POST' \\ 'http://localhost:8000/api/v1/sites/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"site_name\": \"BOR1\", \"case_name\": \"TimingTest\", \"variables\": [ {\"name\": \"STOP_OPTION\", \"value\": \"nyears\"}, {\"name\": \"STOP_N\", \"value\": 100}, {\"name\": \"DATM_YR_START\", \"value\": \"2000\"}, {\"name\": \"DATM_YR_END\", \"value\": \"2010\"}, {\"name\": \"DATM_YR_ALIGN\", \"value\": \"2000\"}, {\"name\": \"LND_TUNING_MODE\", \"value\": \"clm5_1_GSWP3v1\"} ], \"driver\": \"nuopc\" }' See the table below for some example statistics. We provide the software with an MIT licence (free, but without any warranty). Because we rely on external software, there will be potential for dependency issues in the future. This goes for future developments with NorESM, CLM, and FATES, but also for Docker, JupyterLab, and e.g. Python libraries. If you find a bug, or something is not working, please let us know by posting an issue on GitHub. Operating system (version) Technical specifications Docker (version) Create case Run case* Windows 10 Enterprise (21H2) 64-bit, Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz (4 cores) RAM: 16 GB Client: 20.10.20 Server: Docker Desktop 4.13.1 (20.10.20) ~1-2 min ~12h5min MacOS (Ventura 13.2) XXXX Client: 20.10.23 Server: XXX ~1 min X min Linux (Ubuntu 22.04.2 LTS) CPU: Intel Core Processor (Haswell, no TSX), 2500 MHz (1 core) RAM: 4 GB Client: Docker Engine - Community (24.0.1) Server: Docker Engine - Community Engine (24.0.1) ~30 sec ~7h15min * with shared input datasets in place. Note that the software will download these data (~9.6 GB) the very first time you run a case, which will increase the time accordingly. Note that the model only uses a single core with the LSP setup, and that running different site locations can take a different amount of time. Disk usage The following table gives an estimate of the required storage space for the software and the model outputs. The estimates are based on the performance test described above. Entity Details Size Main repository noresm-land-sites-platform/ Fully checked out, but without model input/output data. ~840 MB Images/Containers noresm-land-sites-platform-ui noresm-land-sites-platform-rabbitmq noresm-land-sites-platform-panoply noresm-land-sites-platform-api noresm-land-sites-platform-jupyter noresm-land-sites-platform-tasks ~6.5 GB CLM-FATES input Climate forcing and other required inputs. Shared: ~9.6 GB Per site: ~23 MB CLM-FATES case and output Default 100-year simulation, monthly averaged output values, default history fields. Case folder (wo/ archive): ~300 MB Model outputs (archive): ~370 MB Total: ~17.6 GB Input data preparation Running the model requires specifying compsets, atmospheric forcing, land surface parameters, and often spin-up to get realistic simulations with stable vegetation. Input data is created using NCAR's subset_data script to subset atmospheric forcing from large global data files . This is the simplest way, but has some limilations, specifically that restart runs are not supported. Read more here , and see our Sites page for info on adding your own sites. Subsetting the data requires access to large, global files. The versioned input data are in a shared folder on sigma2.no . The .tar files are compressed and can be opened as a folder with e.g. 7-zip by right-clicking and choosing 'open archive', and used after extracting (unzipping). The data files are stored in .nc (NetCDF) format, which can be viewed using Panoply , or packages in Python or R . The output data from simulations are stored in the same format but in the specific case folder. Legacy version : An alternative, more manual way of creating input data is documented in the NorESMhub/noresm-lsp-input repository. This method is similar to the subset_data method, i.e. there is a config file with the names of the datasets you want to subset. The difference is that instead of calling python scripts using xarray functionalities to subset the nearest neighbor of the grid cell values for domain/atm. forcing, this method relies on additional dependencies (perl etc.) and mapping/grid files, and requires access to large amounts of storage to create the necessary input data. This is because the global data files are very large and must be stored somewhere accessible while we subset from them. The scripts in the input repository are therefore run on e.g. Saga or another supercomputer. To use the legacy version, use the legacy release and tag of the noresm-land-sites-platform repository by making an .env file in the project folder where you add these lines to get the corresponding versions of the LSP and API: PLATFORM_VERSION=v0.2.0 API_VERSION=legacy Component sets (compsets) Short for component sets, compsets specify which component models are used as well as specific settings for forcing scenarios and physics options. NorESM consists of several sub-models (components) for the atmosphere, land, ocean, etc, plus some common infrastructure code that allows the components to pass information back and forth at certain time steps. Component sets have a short name and a longer name with abbreviations denoting the components included. The compset is specified by combining components in this order: atm, lnd, ice, ocn, river, glc, and wave. Each component model version may be \"active,\" \"data,\" \"dead,\" or \"stub\". Stub components are used instead of active to save computation time and input requirements when that component is not needed for the model configuration. For instance, the active land component forced with atmospheric data does not need ice, ocn, or glc components to be active and can replace them with stubs. The compset long name defines it in the code with the following notation: TIME_ATM[%phys]\\_LND[%phys]\\_ICE[%phys]\\_OCN[%phys]\\_ROF[%phys]\\_GLC[%phys]\\_WAV[%phys] . Currently, we only support the following compset using FATES: 2000_DATM%GSWP3v1_CLM51%FATES_SICE_SOCN_MOSART_SGLC_SWAV TIME: Initialization Time, here for the year 2000 which gives present day conditions (as opposed to pre-industrial or future) of e.g. CO 2 ppm ATM: Atmosphere, here DATM%1PTGSWP3 for data-driven (D) atmosphere (ATM) component driven in a point (PT) by GSWP3 forcing data LND: Land, here CLM51%FATES/BGC/SP for active Community Land Model version 5.1 and one of the following vegetation modes: Functionally Assembled Terrestrial Ecosystem Simulator vegetation (FATES) FATES with BioGeoChemistry (BGC) FATES simplified mode with Satellite Phenology (SP) ICE: Sea-ice, here SICE stub ice OCN: Ocean, here SOCN stub ocean ROF: River runoff, here MOSART the MOdel for Scale Adaptive River Transport GLC: Land Ice, here SGLC stub glacier (land ice) component WAV: Wave, here SWAV stub wave component More compsets for pre-industrial or future simulations require additional input data and may be included in future versions of the platform. For now, if you need other compsets you need to dig deeper into the CLM technical documentation and provide the necessary input data and code changes yourself. See the CLM user guide . Atmospheric forcing Atmospheric forcing data drives the modelled climate using a time series of climatic variables. Downloadable data products exist but are often on too coarse scales for realistic single-point simulations. Here is a list of atmospheric forcing variables used in CLM: Incident solar radiation (FSDS), W/m2 Temperature at the lowest atmospheric level (TBOT), degrees K (or can be C) Precipitation (PRECTmms), mm/s Wind speed at the lowest atmospheric level (WIND), m/s Forcing data for our sites are stored with the rest of the input data . Here are some examples of what the input data .tar contains: CAM/chem/trop_mozart_aero/aero/ aerosol deposition: dust, black carbon, organic carbon datm7 GSWP3v1: monthly atmospheric forcing from the GSWP3 data product. The climatic variables in the above list are stored in these files. NASA_LIS: lightning frequency topo_forcing: topography If you have your own data, you can replace the default input files with your own. Make sure the format and units are the exact same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation . Surface data Surface data contains information the model needs about the land surface, such as land use trajectories, soil properties, vegetation parameters, and albedo . Here are some examples of what the input data .tar contains: 'firedata' population density 'paramdata' CLM5 parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allocation of carbon, photosynthetic pathway FATES parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allometry, carbon pools, nitrogen uptake, mortality, recruitment, fuel load for fire module 'snicardata' snow \"growth\" parameters snow \"optics\" 'surfdata_map' surface data: soil depth & other properties, albedo & thermal conductance of different surface types, and fraction of gridcell covered by vegetation, land, & other land cover types 'urbandata' urban classes, building interior temperature Note that when CLM is running without FATES, a simpler 'big-leaf'-version of vegetation is used instead. The CLM5 and FATES parameters thus overlap to some degree, with FATES replacing some and adding other parameters when activated. For the integrated field sites, surface data have been created from raw data sets, using these scripts . If you have your own data, you can replace the default input files with your own. Make sure the format and units are the same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation . Running model experiments The model's original user interface is through a terminal emulator where users enter commands to use the model. The LSP adds a GUI and API to simplify this interface. Graphical User Interface Users can set up cases, change some model settings, and run simulations via the Web Graphical User Interface. Once the platform is correctly up and running, the UI will be available at localhost:8080 . The web UI is an application that represents some configurable parameters of the model in a user-friendly way. It comes with built-in validations and error handling for the acceptable values of the parameters. Its goal is to streamline the process of editing a case and help users focus on the scientific aspects of their simulations rather than on the technical configuration. The information entered in the GUI is sent to the API, which then creates and executes scripts that call on the corresponding model functionalities via the model\u2019s original interfaces. The Web User Interface (UI) code can be found at https://github.com/NorESMhub/noresm-lsp-ui . The UI is created using Typescript , a superset of JavaScript language, with the React framework. API An Application Programming Interface (API) is a set of tools that enables the end-users to interact with a program. The interaction happens by receiving some commands from the users, performing some actions if necessary, and then sending back some results. We created an HTTP API for the model using FastAPI, a popular high-performance framework for Python. It means the API can be used through any medium that can send and receive HTTP requests, e.g., browsers and libraries like python-requests. FastAPI generates a REST API based on OpenAPI specifications . It also automatically generates documentation for the API from the docstrings of the python functions, which includes a description of the inputs and outputs and examples. The documentation is interactive and can be accessed through its web-based user interface. The Platform API is responsible for: Getting a copy of the model code (via version control or by downloading the source code). Setting up the model's external components. Overwriting parts of the model with the specified code in resources/overwrites (optional). Defining the machine config, i.e., the Docker container, for the model (see resources/dotcime ). Creating, configuring, and running cases. Serving inputs and outputs of the created cases. Table: Overview of important API POST requests summarizing the main actions they perform and the processes they trigger in the model code .** API request Summary Specific actions (model tool, if applicable) Examples and links to external resources* Create case Create a new case with the given parameters a) Create case ( ./create_newcase ) b) Case setup ( ./case.setup ) c) Configure parameters ( ./xmlchange and edit CLM namelist files ) d) Use the case's user_mods directory to configure site options and link input data a) ./create_newcase --case [case_name] --compset <2000_DATM%GSWP3v1_CLM51%FATES_SICE_SOCN_MOSART_SGLC_SWAV> --driver <nuopc> --res <CLM_USRDAT> --machine <docker> --run-unsupported --handle-preexisting-dirs --user-mods-dirs <path_to_user_mods_dir> b) - c) ./xmlchange [parameter_name]=[value] Append [parameter_name]=[value] to CLM namelist file. d) - Create site case Same as Create case , but for the integrated field sites In addition: download site input data from online storage (optional) https://github.com/NorESMhub/noresm-lsp-data Run case Download global input data and run a model simulation with the desired model configuration a) Build the case ( ./case.build ) b) If required, download CLM global input data ( ./check_input_data ) c) Define FATES PFTs to include ( ./FatesPFTIndexSwapper.py ; optional) d) Change FATES parameters for included PFTs ( ./modify_fates_paramfile.py ; optional) e) Submit the case ( ./case.submit ) a) - b) ./check_input_data --download c) ./FatesPFTIndexSwapper.py --pft-indices [1,2,3,4] --fin <fates_param_file_path> --fout <new_temp_param_file_path> d) ./modify_fates_paramfile.py --fin <fates_param_file_path> --fout <fates_param_file_path> --O --pft [1,2,3,4] --var [parameter_name] --value [parameter_value] e) - * [] denote user-specified input examples, <> denote adjustable model settings that are currently defined as constants in the default LSP configuration or automatically generated by the API. Full paths for tools omitted for readability. When the containers are up and running, additional API documentation can be accessed at http://localhost:8000/api/v1/docs . The API code can be found at https://github.com/NorESMhub/ctsm-api . API request and response examples The code boxes below provides an example of an API request and response to create a simple case. Request: curl -X 'POST' \\ 'http://localhost:8000/api/v1/sites/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"site_name\": \"ALP1\", \"case_name\": \"MyCase\", \"variables\": [ {\"name\": \"STOP_OPTION\", \"value\": \"nyears\"}, {\"name\": \"STOP_N\", \"value\": 1}, {\"name\": \"DATM_YR_START\", \"value\": \"2000\"}, {\"name\": \"DATM_YR_END\", \"value\": \"2001\"}, {\"name\": \"DATM_YR_ALIGN\", \"value\": \"2000\"}, { \"name\": \"RUN_STARTDATE\", \"value\": \"2000-01-01\" } ], \"driver\": \"nuopc\" }' Response: { \"id\": \"eda42eff3f4f29e3a37cb42e372e7fc4\", \"name\": \"MyCase\", \"model_version\": \"a5e48a\u2026\", \"status\": \"INITIALISED\", \"date_created\": \"2022-10-31T17:59:23\u2026\", \"compset\": \"2000_DATM%GSWP3v1_CLM51%FATES_SICE_SOCN_MOSART_SGLC_SWAV\", \"lat\": 61.0243, \"lon\": 8.12343, \"variables\": [ {\"name\": \"STOP_N\", \"value\": 1}, {\"name\": \"STOP_OPTION\", \"value\": \"nyears\"}, \u2026 ], \"driver\": \"nuopc\", \"data_url\": \"https://raw.githubusercontent.com/NorESMhub/noresm-lsp-data/main/sites/ALP1.zip\", \"site\": \"ALP1\", \"create_task\": { \"task_id\": \"b30d000\u2026\", \"status\": \"PENDING\", \"result\": null, \"error\": null }, \"run_task\": { \"task_id\": null, \"status\": null, \"result\": null, \"error\": null } Reaching equilibrium (spin-up phase) To get realistic simulations, the model needs to run for a while, often hundreds to thousands of years, to reach a state of equilibrium under the applied atmospheric forcing. Starting the model from \"bare ground\" (= startup run type), the model needs time to grow and kill vegetation - for example, to build up soil carbon storage and to establish stable Plant Functional Type distributions resulting from competitive processes. Postprocessing Output is stored in .nc (NetCDF) format. The model output is stored locally in the noresm-land-sites-platform repository under resources/cases/<case-id>/archive , and can optionally be downloaded to another location with the Download Data button in the User Interface. In addition to our notebook and Panoply tools and servers, you can view NetCDF files using Panoply, or packages in Python or R . Notebooks Jupyter notebooks combine text and code, and display results directly below the code boxes. When a case has finished successfully you can open the Jupyter server at localhost:8888 and work with the model output there, using the provided notebooks. Example and tutorial Jupyter notebooks are stored in /notebooks . Notebooks can easily be copied and changed with whatever changes or additions you make. The Jupyter server is available as long as the platform containers are up and running. The Jupyter Server Image comes with some commonly used python libraries for data analysis. The list of bundled libraries is available in the Jupyter Dockerfile . We can also recommend the NCAR-NEON collaboration tutorials, which also use notebooks and may have additional code inspiration for your analysis: NCAR-NEON CESM lab . Panoply In addition to a Jupyter server, you can open Panoply on localhost:5800 while the containers are running. Panoply is useful for exploring the complete set of output variables, and can also generate plots. Customising the NorESM-LSP This section is mostly for developers of the NorESM-LSP, and documents how the NorESM-LSP code wraps around the code for the specific models. Adjusting the GUI Model parameters and site configuration For an overview of the model settings and parameters users can change, see the user guide . This section describes how the NorESM-LSP code handles the settings that are displayed in the Graphical User Interface. To be able to set model parameters in the web UI, some configuration files are needed. Both model parameters and site configurations are provided by the maintainers as JSON files in resources/config/variables_config.json and resources/config/sites.json . They can be modified by users who are familiar with the model. The model parameters file contains a list of JSON objects. Attributes of each object are described in table 1. Note that not all types of variables accepted by the model are supported in the user interface at this point. The tables below describe how these configuration files work and handle the model settings users can change in the UI. Table 1: Model parameter attributes, compare to the variables_config.json file in /resources/config Attribute Type default Required Scope Description name string - yes Model Name of the variable exactly as it should be passed to the model. label string - no UI A human-readable label describing the parameter. category string - yes API One of the following: ctsm_xml , user_nl_clm , user_nl_clm_history_file , fates , fates_param . type string - yes Model, API One of the following: char , integer , float , logical , date . description string - no UI Detailed description of the parameter. readonly boolean false no UI Whether the parameter can be edited by the user. hidden boolean false no UI Whether the parameter should be hidden from the user. allow_multiple boolean false no API, UI Whether the parameter accepts multiple values. allow_custom boolean false no UI Whether users can enter values other than the ones provided as choices (only applies to those parameters with choices in their validation attribute. validation Validation object - no API, UI See Validation table below ([TODO: X3]). default integer, float, string, boolean - no API A default value to use. It must match the type specified by the type attribute. If allow_multiple is set to true , it must be a list of values. placeholder string - no UI A placeholder value to show to the user. This value is not actually applied if no value is entered by the user. append_input_path boolean false no API Whether to adjust a path value based on its relative location in the input folder. Entered values are checked for correctness with rules defined in the validation attribute. Table 2 describes the currently supported validation rules. Table 2: validation attributes to define which values are accepted for each model parameter Attribute Type Description min float A minimum value for numeric attributes. max float A maximum value for numeric attributes. pattern string A regular expression to match the value against. pattern_error string A custom error message for values not matching the pattern attribute. choices [integer, float, string, boolean] A list of choices for users to select from. Sites in resources/config/sites.json are described as GeoJSON points . The interactive map in the web UI draws on these site definitions. Their configuration is set in the properties attribute of the GeoJSON object, as described in table 3. Table 3: Site geoJSON properties, compare with the sites.json file in /resources/config Attribute Type Required Description name string yes Name of the site. compset string yes The component set to use with the model. res string yes The resolution/grid to use with the model. config [Config object] no Config is an object with two keys: name and value . The former must point to a parameter in resources/config/variables_config.json . The latter must be a valid value for that parameters. These are used as default values for the given parameter for the site. Running the NorESM-LSP remotely Containerisation of software like the NorESM-LSP and models (NorESM, CLM, FATES) makes it possible to publish it on other services, e.g. cloud computing services where users can sign up and run model experiments remotely. That way, users don't have to install anything on their own computers. For long or multiple experiments, using remote computing resources may be necessary. An early version of the NorESM-LSP exists on Galaxy, a free and open cloud computing service. It is also possible to run the NorESM-LSP on a remote computer, like a research-infrastructure computer cluster (e.g. NREC, Saga, Fram for University of Oslo users), via an ssh tunnel . If you need to run many or long simulations, a remote computer may be beneficial because it doesn't take up your local computer's resources and doesn't require your local computer to be turned on throughout the simulation time. Galaxy Tool for FATES Galaxy is free to use and only requires registering as a user. Note that this tool is to be considered a pilot version, and does not include all the functionalities of the NorESM-LSP. It does, on the other hand, include metadata to make it FAIR (Findable, Accessible, Interoperable, Reusable), and has Research Objects on ROHub . Tutorial with the CLM-FATES Galaxy tool Direct link to the CTSM/FATES-EMERALD tool on Galaxy.eu SSH tunneling, with example for NREC These instructions are for installing and using the NoESM-LSP on a remote machine. The remote machine must allow remote access via SSH. If you want to run the NorESM-LSP on a server without SSH capability, you will need to talk to your local IT department to find a different solution. We describe all required steps from scratch and not all steps might be necessary for all virtual/remote machines (e.g. Docker may already be installed). The instructions are tailored for and tested on NREC (remote) and Windows with Ubuntu subsystem (local) and might need adaptations on other systems. On NREC, we use a new instance based on the GOLD Ubuntu 22.04 LTS base image. The commands to install programs etc. may differ for other distributions and operating systems. For Norwegian/University of Oslo users: if you're wondering how to set up a virtual machine on NREC, check out the archived instructions here , and the Norwegian Research and Education Cloud (NREC) documentation . 1. Run the platform remotely 1.1 Open a terminal that has the ssh command installed and access the remote machine (e.g. users at the University of Oslo can run a Virtual Machine on NREC ): ssh [user]@[ip] # for example: ssh ubuntu@158.37.65.132 1.2 Use Git to clone the NorESM-LSP repository (install Git first if necessary): git clone https://github.com/NorESMhub/noresm-land-sites-platform.git --config core.autocrlf=input and make sure the following lines of code allow users to access its functionalities from the outside. In /noresm-land-sites-platform/docker/api/.env (open with an editor or IDE, e.g. vi .env ), line 2, change to: BACKEND_CORS_ORIGINS=[\"*\"] 1.3 Install Docker and Docker Compose . Subsequently, add the current user to the Docker user group if you get an error related to access rights (may require restarting the terminal when finished): [sudo] usermod -a -G docker $USER newgrp docker 1.4 Start a new named screen session: screen -S lsp May require sudo/admin rights and the installation of screen , e.g. on Debian/Ubuntu: [sudo] apt install screen 1.5 Change into the project directory via cd noresm-land-sites-platform and install the NorESM-LSP via docker-compose up or docker compose up (depends on the Docker installation; also described in the user guide). 1.6 Once everyting is up and running, detach your current screen session by subsequently pressing CTRL+a and CTRL+d . The session should now appear when you type [sudo] screen -list . 1.7 Open a new local terminal and enable ssh port listening to the relevant NorESM-LSP ports: ssh -L 8000:localhost:8000 -N -f [user]@[ip] # API ssh -L 8080:localhost:8080 -N -f [user]@[ip] # GUI ssh -L 8888:localhost:8888 -N -f [user]@[ip] # JupyterLab ssh -L 5800:localhost:5800 -N -f [user]@[ip] # Panoply where [user]@[ip] must be the same as in step 1.1 You will probably need to enter your password each time you open a port. Attention! If any of these ports are already in use, change the number after the second colon or execute step 1.9 and retry this step. 1.8 Open your local browser and access the NorESM-LSP tools of your choice. Enter into the address bar (remember to adapt the port numbers if you changed them in step 1.7): localhost:8000/api/v1/docs # API dashboard localhost:8080 # GUI localhost:8888 # JupyterLab localhost:5800 # Panoply You can now build/run model experiments as usual. Once the models are running, you can close the browser and shut off your computer. If you restart your machine, re-execute step 7 to be able to access the programs again. 1.9 To stop the port listening described above manually: fuser -k 8080/tcp fuser -k 8000/tcp fuser -k 8888/tcp fuser -k 5800/tcp where the port numbers must correspond to the numbers you specified in step 1.7. 1.10 Once you are ready to shut off the NorESM-LSP, reattach the screen session via: screen -r lsp and stop the running containers ( CTRL+c ). To kill the screen session, detach ( CTRL+a and CTRL+d ) and enter: screen -XS lsp quit 2 Download the results To download the results to your local machine, you can either use a dedicated file transfer program such as WinSCP or bash commands such as scp . To copy a case folder from the remote server using scp : scp -r [user]@[ip]:[remote_path_to_lsp]/resources/cases/[case_folder_name] [local_save_path] For example: # Note the trailing dot, which denotes copying into the current working directory! scp -r ubuntu@158.37.65.123:/home/ubuntu/noresm-land-sites-platform/resources/cases/5994e825658b853b95d61feccffd18ad_bor1-1000y . Be aware that model outputs for long simulations can result in large file sizes; make sure you have enough space available on your disk. This is the end of the technical documentation. Do you see a mistake, did we forget to describe something, or do you have more questions? Please let us know by posting an issue","title":"Technical documentation"},{"location":"documentation/#technical-documentation-for-the-noresm-land-sites-platform","text":"This page describes what the platform contains, how the input data were made, the main functionalities, and the model output. See the navigation panel on the left for our user guide , available sites , about us , and contribution guidelines and Code of Conduct . You can use the platform to run single-point model simulations from a browser on your local computer. We provide sites with input data (atmospheric forcing, land surface data), and analysis tools with example python code to plot some input and output data. Please let us know if you have questions, suggestions, or trouble using the platform by opening a new issue on GitHub.","title":"Technical documentation for the NorESM Land Sites Platform"},{"location":"documentation/#introduction","text":"","title":"Introduction"},{"location":"documentation/#links-to-noresm-lsp-github-repositories","text":"NorESMhub/noresm-land-sites-platform NorESMhub/noresm-lsp-ui NorESMhub/noresm-lsp-data NorESMhub/ctsm-api NorESMhub/NorESM ( NorESMhub/noresm-lsp-input for legacy method of creating input data for integrated sites) The main code is stored in the NorESMhub/noresm-land-sites-platform repository. The main branch stores the latest functioning version. Older versions can be accessed under Releases . This documentation page is made with GitHub pages ( gh-pages branch) and Mkdocs . To contribute to the code or documentation, see our Contributing instructions. There you will also find our Code of Conduct .","title":"Links to NorESM-LSP GitHub repositories"},{"location":"documentation/#documentation-of-the-model-framework","text":"The model framework consists of the Norwegian Earth System Model (NorESM), the Community Land Model (CLM), and the Functionally Assembled Terrestrial Ecosystem Simulator (FATES). While the LSP version 1 only runs CLM-FATES, an earth system model (the NorESM) is necessary as software infrastructure. Notably, the coupler ( CIME ) contains a model driver and the infrastructure needed to create and control cases (see glossary ). An alternative to using NorESM could be CESM , which uses the same coupler and CLM as its land component. Each model has its own documentation and tutorials. See our page with links to external tutorials and resources for some recommendations on where to start learning more . Here are the central documentation pages and repositories for the respective models:","title":"Documentation of the model framework"},{"location":"documentation/#fates","text":"Technical documentation and user guide GitHub repository","title":"FATES"},{"location":"documentation/#clm","text":"Technical documentation and user guide GitHub repository","title":"CLM"},{"location":"documentation/#noresm","text":"Technical documentation and user guide GitHub repository","title":"NorESM"},{"location":"documentation/#glossary-of-technical-terms","text":"","title":"Glossary of technical terms"},{"location":"documentation/#software-engineering-terms","text":"Term Definition API = Application Programming Interface An interface for computer programs to communicate with each other. It offers a service to other pieces of software. An API specification is a document or standard that describes how to build or use such a connection or interface. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. [Wikipedia] Container, Container image, Docker Containers are isolated, virtualized computer environments based on an image, a read-only file with source code, libraries, dependencies, and tools. Docker Inc. provides containers for free personal and educational use. See the Docker webpage and e.g. the CLASSIC model's containerisation description Git, GitHub, repository Git software enables version control by tracking changes in files. GitHub is an online host of repositories, i.e. data structures of files and their version history. GUI = Graphical User Interface An interface between humans and software or hardware, with clickable icons. The NorESM-LSP GUI is accessed after installation and setup at localhost:8080 in a browser, and lets users set up and run model experiments (simulations). Terminal A computer program where users interact with an operating system by typing in commands (as opposed to clicking and seeing programs in windows). Examples are Windows PowerShell and puTTy. [Wikipedia]","title":"Software engineering terms"},{"location":"documentation/#earth-system-modelling-terms","text":"Note that some terms may have slightly different definitions in different models. These definitions are written to be quite general but valid for the NorESM, CLM, and FATES models. Term Definition DGVM, FATES D ynamic G lobal V egetation M odels are computer programs that simulate vegetation. [Wikipedia] [Scheiter, Langan & Higgins, 2013] . The F uncionally A ssembled T errestrial E cosystem S imulator is a DGVM that works with CLM as a host model. FATES groups individuals into cohorts, has flexible PFT definitions, is deterministic, and lacks hardcoded climate thresholds for PFTs. [Fisher et al. 2015] [Fisher & Koven 2020] [Fisher et al. 2018] LSM, CLM/CTSM L and S urface M odels are computer programs that use quantitative methods to simulate the exchange of energy, water, and e.g. CO2 at the interface between the Earth's surface and atmosphere. The C ommunity L and M odel is an LSM, and part of the C ommunity T errestrial S ystem M odel (which also includes a river runoff model). ESM, NorESM E arth S ystem M odels are computer programs that simulate the exchanges of energy and material (water, carbon, etc.) in the Earth System, typically by combining sub-models for each major component of the Earth System: land surface, atmosphere, ocean, and ice. These component models include code representation of differential equations from e.g. physics and biogeochemistry, which are solved numerically as the model runs through a simulation from initial conditions. The Nor wegian E arth S ystem M odel is an ESM that is related to the Community Earth System Model but has different component models for e.g. ocean and atmosphere. Model coupling, CIME Eath System Model components can be coupled with infrastructure code such as C ommon I nfrastructure for M odelling the E arth (CIME) . When models are run in coupled mode, information about energy and matter are exchanged between the component models in a dynamic way that allows feedbacks in the system. Models operate with time steps, e.g. 30 mins or 3 hours or 1 year, when values calculated for the relevant processes are exchanged between components that can use that value for calculating changes in the next time step. Running a fully coupled ESM is computationally expensive. Stub, Data model Alternatives to running a model fully coupled can be to deactivate components (using component stubs ) or using a data set instead of dynamically calculating the values needed by the active model component. For instance, the NorESM-LSP uses the \"land-only mode\" of the model framework, where the land model (CLM) is active, the atmosphere component is replaced by data, and the ocean and ice components are deactivated stubs. PFT = Plant Functional Type Plant Functional Types are non-phylogenetic groups of plants, defined by a set of parameters. Parameters include e.g. leaf shape, deciduousness, growth form, allometry equation parameters, maximum specific leaf area, and minimum temperature tolerance. Cohort A group of individual trees of the same PFT and size. Patch Tile with a defined age since some disturbance (fire, logging). Forcing data Data that is not impacted by the model but provided as input, generally from observation data sets. Defines the necessary boundary conditions to the model, e.g. temperature and precipitation, throughout its simulation time.","title":"Earth System Modelling terms"},{"location":"documentation/#versions","text":"Platform versions follow standard numbering, and releases below 1 should be considered unstable and preliminary.","title":"Versions"},{"location":"documentation/#list-of-versions-newest-on-top","text":"release 1 v0.2.0 (before user-mods) - for simulations with input data generated with NorESMhub/noresm-lsp-input repo. Use with legacy tags of ctsm-api and noresm-lsp-ui tag 0.1.0 (first draft with older model versions) archive tag (pre GUI and API)","title":"List of versions (newest on top):"},{"location":"documentation/#model-versions","text":"The platform is primarily designed to run the land model (CLM) with the Norwegian Earth System Model. The versions of FATES and CLM therefore have to be in line with stable NorESM versions. You can see the component model versions in the Externals.cfg file under /resources/overwrites/ in the noresm-land-sites-platform repository .","title":"Model versions"},{"location":"documentation/#changing-the-model-version","text":"To change the model versions, either to update the NorESM-LSP or on your own fork, there are two files to consider. The first is the NorESM version in the docker environment file ( noresm-land-sites-platform/docker/api/.env ), and the second (more important) is a file to overwrite the model component versions located in NorESM-land-sites-platform/resources/overwrites/Externals.cfg . The FATES version is defined in NorESM-land-sites-platform/resources/model/components/clm/Externals_CLM.cfg . To change the FATES version, you need to either run ./checkout_externals manually or alternatively point to a version of CTSM in Externals.cfg that uses the desired version of FATES.","title":"Changing the model version"},{"location":"documentation/#software-architecture","text":"The NorESM-LSP relies on Docker containers and an Application Programming Interface (API). The illustrations below show the relationship between containers and folders for case files, model settings and model files (Figure 1), and between all the NorESM GitHub repositories, Docker images, and containers (Figure 2). Figure 1: Illustration of the software architecture. The model container is expanded to show the two services running in there (i.e. API and Tasks ) in addition to hosting the model and its dependencies. ./resources contains all the folders that are mounted into the containers by docker-compose . The model and the API manage the ones on the left, and the folders on the right are created by the code maintainers -- an asterisk indicates the folder is optional. After first-time installation and setup , users can access the Web User Interface (UI) and Jupyter server. The UI uses an Application Programming Interface (API) to send commands between the users and containers. Figure 2: Illustration of the GitHub repositories and Docker images and containers that make up the NorESM Land Sites Platform. Dockerfiles in Github repositories are the basis of static Docker images (read-only files with source code, libraries, dependencies, and tools) that the containers (virtual computer environments where the models can run) can start from. Code in repositories is also sent directly to the containers.","title":"Software architecture"},{"location":"documentation/#docker-containers-and-model-dependencies","text":"CTSM and NorESM depend on many external libraries, which can be challenging to install on a personal computer. The difficulties can be due to a lack of cross-platform support, version conflict with existing libraries, or system architecture. One solution to this is containerization, which is the process of packaging and distributing software in a way that can be run on various platforms. Containers use Operating System-level virtualization. This allows efficient use of resources while isolating the software from other processes running on the host system. All the requirements for packaged software are included in the container. We used Docker for this purpose. Docker is a widely used and popular containerization tool. To create a container where model simulations can be run, we start with a Dockerfile to create an Image and then a Container (see Figure 2 above). The packaged software is called an Image. When a Docker Image is run, it is called a Container, i.e., a running instance of the software. The main Image created for the Platform is ctsm-api . It contains all the dependencies for the model, the scripts to initialize and configure the model, and the API code that provides access to the model. In order to allow easier maintenance and better use of resources, some dependencies are not included in the Image. For example, the message queuing broker (RabbitMQ) required by the API, which is needed to manage asynchronous communications between the model and the API, is not included. This service can be added by using the official RabbitMQ Docker Image . Keeping this service out of the Image lets more savvy users pick a different message broker for their use cases. To address the needs of non-technical users, we have taken care of the extra configurations for the containers by using an orchestration tool called Docker Compose . Docker Compose is a wrapper around Docker, which allows configuring and organizing all the containers in a single YAML file. In addition to the previously mentioned Images, we have included an Image for Jupyter Server and one for our Web User Interface (UI) for ctsm-api . The reason for using a container is that the NorESM model code is not an app but rather a collection of code, and that code needs to be modified in order to run on a new machine. To make the model more like a downloadable app for any machine (e.g. your mac/windows/linux laptop/pc), we put the code in a Docker container that works as a mini-machine within your machine (laptop/pc). A Dockerfile is used to direct the docker engine in the construction of Docker images. When we release a new version, we have to build a new Docker image using this Dockerfile. Users can then download the image and build a new container to run simulations there.","title":"Docker containers and model dependencies"},{"location":"documentation/#stability-and-performance","text":"We tested the software ( LSP v1.0.0 ) on machines with different operating systems and hardware specifications. They all ran an identical default 100-year model experiment, which we created with the following API request: curl -X 'POST' \\ 'http://localhost:8000/api/v1/sites/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"site_name\": \"BOR1\", \"case_name\": \"TimingTest\", \"variables\": [ {\"name\": \"STOP_OPTION\", \"value\": \"nyears\"}, {\"name\": \"STOP_N\", \"value\": 100}, {\"name\": \"DATM_YR_START\", \"value\": \"2000\"}, {\"name\": \"DATM_YR_END\", \"value\": \"2010\"}, {\"name\": \"DATM_YR_ALIGN\", \"value\": \"2000\"}, {\"name\": \"LND_TUNING_MODE\", \"value\": \"clm5_1_GSWP3v1\"} ], \"driver\": \"nuopc\" }' See the table below for some example statistics. We provide the software with an MIT licence (free, but without any warranty). Because we rely on external software, there will be potential for dependency issues in the future. This goes for future developments with NorESM, CLM, and FATES, but also for Docker, JupyterLab, and e.g. Python libraries. If you find a bug, or something is not working, please let us know by posting an issue on GitHub. Operating system (version) Technical specifications Docker (version) Create case Run case* Windows 10 Enterprise (21H2) 64-bit, Intel(R) Core(TM) i5-8265U CPU @ 1.60GHz (4 cores) RAM: 16 GB Client: 20.10.20 Server: Docker Desktop 4.13.1 (20.10.20) ~1-2 min ~12h5min MacOS (Ventura 13.2) XXXX Client: 20.10.23 Server: XXX ~1 min X min Linux (Ubuntu 22.04.2 LTS) CPU: Intel Core Processor (Haswell, no TSX), 2500 MHz (1 core) RAM: 4 GB Client: Docker Engine - Community (24.0.1) Server: Docker Engine - Community Engine (24.0.1) ~30 sec ~7h15min * with shared input datasets in place. Note that the software will download these data (~9.6 GB) the very first time you run a case, which will increase the time accordingly. Note that the model only uses a single core with the LSP setup, and that running different site locations can take a different amount of time.","title":"Stability and performance"},{"location":"documentation/#disk-usage","text":"The following table gives an estimate of the required storage space for the software and the model outputs. The estimates are based on the performance test described above. Entity Details Size Main repository noresm-land-sites-platform/ Fully checked out, but without model input/output data. ~840 MB Images/Containers noresm-land-sites-platform-ui noresm-land-sites-platform-rabbitmq noresm-land-sites-platform-panoply noresm-land-sites-platform-api noresm-land-sites-platform-jupyter noresm-land-sites-platform-tasks ~6.5 GB CLM-FATES input Climate forcing and other required inputs. Shared: ~9.6 GB Per site: ~23 MB CLM-FATES case and output Default 100-year simulation, monthly averaged output values, default history fields. Case folder (wo/ archive): ~300 MB Model outputs (archive): ~370 MB Total: ~17.6 GB","title":"Disk usage"},{"location":"documentation/#input-data-preparation","text":"Running the model requires specifying compsets, atmospheric forcing, land surface parameters, and often spin-up to get realistic simulations with stable vegetation. Input data is created using NCAR's subset_data script to subset atmospheric forcing from large global data files . This is the simplest way, but has some limilations, specifically that restart runs are not supported. Read more here , and see our Sites page for info on adding your own sites. Subsetting the data requires access to large, global files. The versioned input data are in a shared folder on sigma2.no . The .tar files are compressed and can be opened as a folder with e.g. 7-zip by right-clicking and choosing 'open archive', and used after extracting (unzipping). The data files are stored in .nc (NetCDF) format, which can be viewed using Panoply , or packages in Python or R . The output data from simulations are stored in the same format but in the specific case folder. Legacy version : An alternative, more manual way of creating input data is documented in the NorESMhub/noresm-lsp-input repository. This method is similar to the subset_data method, i.e. there is a config file with the names of the datasets you want to subset. The difference is that instead of calling python scripts using xarray functionalities to subset the nearest neighbor of the grid cell values for domain/atm. forcing, this method relies on additional dependencies (perl etc.) and mapping/grid files, and requires access to large amounts of storage to create the necessary input data. This is because the global data files are very large and must be stored somewhere accessible while we subset from them. The scripts in the input repository are therefore run on e.g. Saga or another supercomputer. To use the legacy version, use the legacy release and tag of the noresm-land-sites-platform repository by making an .env file in the project folder where you add these lines to get the corresponding versions of the LSP and API: PLATFORM_VERSION=v0.2.0 API_VERSION=legacy","title":"Input data preparation"},{"location":"documentation/#component-sets-compsets","text":"Short for component sets, compsets specify which component models are used as well as specific settings for forcing scenarios and physics options. NorESM consists of several sub-models (components) for the atmosphere, land, ocean, etc, plus some common infrastructure code that allows the components to pass information back and forth at certain time steps. Component sets have a short name and a longer name with abbreviations denoting the components included. The compset is specified by combining components in this order: atm, lnd, ice, ocn, river, glc, and wave. Each component model version may be \"active,\" \"data,\" \"dead,\" or \"stub\". Stub components are used instead of active to save computation time and input requirements when that component is not needed for the model configuration. For instance, the active land component forced with atmospheric data does not need ice, ocn, or glc components to be active and can replace them with stubs. The compset long name defines it in the code with the following notation: TIME_ATM[%phys]\\_LND[%phys]\\_ICE[%phys]\\_OCN[%phys]\\_ROF[%phys]\\_GLC[%phys]\\_WAV[%phys] . Currently, we only support the following compset using FATES: 2000_DATM%GSWP3v1_CLM51%FATES_SICE_SOCN_MOSART_SGLC_SWAV TIME: Initialization Time, here for the year 2000 which gives present day conditions (as opposed to pre-industrial or future) of e.g. CO 2 ppm ATM: Atmosphere, here DATM%1PTGSWP3 for data-driven (D) atmosphere (ATM) component driven in a point (PT) by GSWP3 forcing data LND: Land, here CLM51%FATES/BGC/SP for active Community Land Model version 5.1 and one of the following vegetation modes: Functionally Assembled Terrestrial Ecosystem Simulator vegetation (FATES) FATES with BioGeoChemistry (BGC) FATES simplified mode with Satellite Phenology (SP) ICE: Sea-ice, here SICE stub ice OCN: Ocean, here SOCN stub ocean ROF: River runoff, here MOSART the MOdel for Scale Adaptive River Transport GLC: Land Ice, here SGLC stub glacier (land ice) component WAV: Wave, here SWAV stub wave component More compsets for pre-industrial or future simulations require additional input data and may be included in future versions of the platform. For now, if you need other compsets you need to dig deeper into the CLM technical documentation and provide the necessary input data and code changes yourself. See the CLM user guide .","title":"Component sets (compsets)"},{"location":"documentation/#atmospheric-forcing","text":"Atmospheric forcing data drives the modelled climate using a time series of climatic variables. Downloadable data products exist but are often on too coarse scales for realistic single-point simulations. Here is a list of atmospheric forcing variables used in CLM: Incident solar radiation (FSDS), W/m2 Temperature at the lowest atmospheric level (TBOT), degrees K (or can be C) Precipitation (PRECTmms), mm/s Wind speed at the lowest atmospheric level (WIND), m/s Forcing data for our sites are stored with the rest of the input data . Here are some examples of what the input data .tar contains: CAM/chem/trop_mozart_aero/aero/ aerosol deposition: dust, black carbon, organic carbon datm7 GSWP3v1: monthly atmospheric forcing from the GSWP3 data product. The climatic variables in the above list are stored in these files. NASA_LIS: lightning frequency topo_forcing: topography If you have your own data, you can replace the default input files with your own. Make sure the format and units are the exact same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation .","title":"Atmospheric forcing"},{"location":"documentation/#surface-data","text":"Surface data contains information the model needs about the land surface, such as land use trajectories, soil properties, vegetation parameters, and albedo . Here are some examples of what the input data .tar contains: 'firedata' population density 'paramdata' CLM5 parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allocation of carbon, photosynthetic pathway FATES parameters: many parameters, covering e.g. Plant Functional Types (PFTs), allometry, carbon pools, nitrogen uptake, mortality, recruitment, fuel load for fire module 'snicardata' snow \"growth\" parameters snow \"optics\" 'surfdata_map' surface data: soil depth & other properties, albedo & thermal conductance of different surface types, and fraction of gridcell covered by vegetation, land, & other land cover types 'urbandata' urban classes, building interior temperature Note that when CLM is running without FATES, a simpler 'big-leaf'-version of vegetation is used instead. The CLM5 and FATES parameters thus overlap to some degree, with FATES replacing some and adding other parameters when activated. For the integrated field sites, surface data have been created from raw data sets, using these scripts . If you have your own data, you can replace the default input files with your own. Make sure the format and units are the same, otherwise the model will not be able to use them. For more information on using custom input to CLM, see the CLM documentation .","title":"Surface data"},{"location":"documentation/#running-model-experiments","text":"The model's original user interface is through a terminal emulator where users enter commands to use the model. The LSP adds a GUI and API to simplify this interface.","title":"Running model experiments"},{"location":"documentation/#graphical-user-interface","text":"Users can set up cases, change some model settings, and run simulations via the Web Graphical User Interface. Once the platform is correctly up and running, the UI will be available at localhost:8080 . The web UI is an application that represents some configurable parameters of the model in a user-friendly way. It comes with built-in validations and error handling for the acceptable values of the parameters. Its goal is to streamline the process of editing a case and help users focus on the scientific aspects of their simulations rather than on the technical configuration. The information entered in the GUI is sent to the API, which then creates and executes scripts that call on the corresponding model functionalities via the model\u2019s original interfaces. The Web User Interface (UI) code can be found at https://github.com/NorESMhub/noresm-lsp-ui . The UI is created using Typescript , a superset of JavaScript language, with the React framework.","title":"Graphical User Interface"},{"location":"documentation/#api","text":"An Application Programming Interface (API) is a set of tools that enables the end-users to interact with a program. The interaction happens by receiving some commands from the users, performing some actions if necessary, and then sending back some results. We created an HTTP API for the model using FastAPI, a popular high-performance framework for Python. It means the API can be used through any medium that can send and receive HTTP requests, e.g., browsers and libraries like python-requests. FastAPI generates a REST API based on OpenAPI specifications . It also automatically generates documentation for the API from the docstrings of the python functions, which includes a description of the inputs and outputs and examples. The documentation is interactive and can be accessed through its web-based user interface. The Platform API is responsible for: Getting a copy of the model code (via version control or by downloading the source code). Setting up the model's external components. Overwriting parts of the model with the specified code in resources/overwrites (optional). Defining the machine config, i.e., the Docker container, for the model (see resources/dotcime ). Creating, configuring, and running cases. Serving inputs and outputs of the created cases.","title":"API"},{"location":"documentation/#table-overview-of-important-api-post-requests-summarizing-the-main-actions-they-perform-and-the-processes-they-trigger-in-the-model-code","text":"API request Summary Specific actions (model tool, if applicable) Examples and links to external resources* Create case Create a new case with the given parameters a) Create case ( ./create_newcase ) b) Case setup ( ./case.setup ) c) Configure parameters ( ./xmlchange and edit CLM namelist files ) d) Use the case's user_mods directory to configure site options and link input data a) ./create_newcase --case [case_name] --compset <2000_DATM%GSWP3v1_CLM51%FATES_SICE_SOCN_MOSART_SGLC_SWAV> --driver <nuopc> --res <CLM_USRDAT> --machine <docker> --run-unsupported --handle-preexisting-dirs --user-mods-dirs <path_to_user_mods_dir> b) - c) ./xmlchange [parameter_name]=[value] Append [parameter_name]=[value] to CLM namelist file. d) - Create site case Same as Create case , but for the integrated field sites In addition: download site input data from online storage (optional) https://github.com/NorESMhub/noresm-lsp-data Run case Download global input data and run a model simulation with the desired model configuration a) Build the case ( ./case.build ) b) If required, download CLM global input data ( ./check_input_data ) c) Define FATES PFTs to include ( ./FatesPFTIndexSwapper.py ; optional) d) Change FATES parameters for included PFTs ( ./modify_fates_paramfile.py ; optional) e) Submit the case ( ./case.submit ) a) - b) ./check_input_data --download c) ./FatesPFTIndexSwapper.py --pft-indices [1,2,3,4] --fin <fates_param_file_path> --fout <new_temp_param_file_path> d) ./modify_fates_paramfile.py --fin <fates_param_file_path> --fout <fates_param_file_path> --O --pft [1,2,3,4] --var [parameter_name] --value [parameter_value] e) - * [] denote user-specified input examples, <> denote adjustable model settings that are currently defined as constants in the default LSP configuration or automatically generated by the API. Full paths for tools omitted for readability. When the containers are up and running, additional API documentation can be accessed at http://localhost:8000/api/v1/docs . The API code can be found at https://github.com/NorESMhub/ctsm-api .","title":"Table: Overview of important API POST requests summarizing the main actions they perform and the processes they trigger in the model code.**"},{"location":"documentation/#api-request-and-response-examples","text":"The code boxes below provides an example of an API request and response to create a simple case. Request: curl -X 'POST' \\ 'http://localhost:8000/api/v1/sites/' \\ -H 'accept: application/json' \\ -H 'Content-Type: application/json' \\ -d '{ \"site_name\": \"ALP1\", \"case_name\": \"MyCase\", \"variables\": [ {\"name\": \"STOP_OPTION\", \"value\": \"nyears\"}, {\"name\": \"STOP_N\", \"value\": 1}, {\"name\": \"DATM_YR_START\", \"value\": \"2000\"}, {\"name\": \"DATM_YR_END\", \"value\": \"2001\"}, {\"name\": \"DATM_YR_ALIGN\", \"value\": \"2000\"}, { \"name\": \"RUN_STARTDATE\", \"value\": \"2000-01-01\" } ], \"driver\": \"nuopc\" }' Response: { \"id\": \"eda42eff3f4f29e3a37cb42e372e7fc4\", \"name\": \"MyCase\", \"model_version\": \"a5e48a\u2026\", \"status\": \"INITIALISED\", \"date_created\": \"2022-10-31T17:59:23\u2026\", \"compset\": \"2000_DATM%GSWP3v1_CLM51%FATES_SICE_SOCN_MOSART_SGLC_SWAV\", \"lat\": 61.0243, \"lon\": 8.12343, \"variables\": [ {\"name\": \"STOP_N\", \"value\": 1}, {\"name\": \"STOP_OPTION\", \"value\": \"nyears\"}, \u2026 ], \"driver\": \"nuopc\", \"data_url\": \"https://raw.githubusercontent.com/NorESMhub/noresm-lsp-data/main/sites/ALP1.zip\", \"site\": \"ALP1\", \"create_task\": { \"task_id\": \"b30d000\u2026\", \"status\": \"PENDING\", \"result\": null, \"error\": null }, \"run_task\": { \"task_id\": null, \"status\": null, \"result\": null, \"error\": null }","title":"API request and response examples"},{"location":"documentation/#reaching-equilibrium-spin-up-phase","text":"To get realistic simulations, the model needs to run for a while, often hundreds to thousands of years, to reach a state of equilibrium under the applied atmospheric forcing. Starting the model from \"bare ground\" (= startup run type), the model needs time to grow and kill vegetation - for example, to build up soil carbon storage and to establish stable Plant Functional Type distributions resulting from competitive processes.","title":"Reaching equilibrium (spin-up phase)"},{"location":"documentation/#postprocessing","text":"Output is stored in .nc (NetCDF) format. The model output is stored locally in the noresm-land-sites-platform repository under resources/cases/<case-id>/archive , and can optionally be downloaded to another location with the Download Data button in the User Interface. In addition to our notebook and Panoply tools and servers, you can view NetCDF files using Panoply, or packages in Python or R .","title":"Postprocessing"},{"location":"documentation/#notebooks","text":"Jupyter notebooks combine text and code, and display results directly below the code boxes. When a case has finished successfully you can open the Jupyter server at localhost:8888 and work with the model output there, using the provided notebooks. Example and tutorial Jupyter notebooks are stored in /notebooks . Notebooks can easily be copied and changed with whatever changes or additions you make. The Jupyter server is available as long as the platform containers are up and running. The Jupyter Server Image comes with some commonly used python libraries for data analysis. The list of bundled libraries is available in the Jupyter Dockerfile . We can also recommend the NCAR-NEON collaboration tutorials, which also use notebooks and may have additional code inspiration for your analysis: NCAR-NEON CESM lab .","title":"Notebooks"},{"location":"documentation/#panoply","text":"In addition to a Jupyter server, you can open Panoply on localhost:5800 while the containers are running. Panoply is useful for exploring the complete set of output variables, and can also generate plots.","title":"Panoply"},{"location":"documentation/#customising-the-noresm-lsp","text":"This section is mostly for developers of the NorESM-LSP, and documents how the NorESM-LSP code wraps around the code for the specific models.","title":"Customising the NorESM-LSP"},{"location":"documentation/#adjusting-the-gui","text":"","title":"Adjusting the GUI"},{"location":"documentation/#model-parameters-and-site-configuration","text":"For an overview of the model settings and parameters users can change, see the user guide . This section describes how the NorESM-LSP code handles the settings that are displayed in the Graphical User Interface. To be able to set model parameters in the web UI, some configuration files are needed. Both model parameters and site configurations are provided by the maintainers as JSON files in resources/config/variables_config.json and resources/config/sites.json . They can be modified by users who are familiar with the model. The model parameters file contains a list of JSON objects. Attributes of each object are described in table 1. Note that not all types of variables accepted by the model are supported in the user interface at this point. The tables below describe how these configuration files work and handle the model settings users can change in the UI. Table 1: Model parameter attributes, compare to the variables_config.json file in /resources/config Attribute Type default Required Scope Description name string - yes Model Name of the variable exactly as it should be passed to the model. label string - no UI A human-readable label describing the parameter. category string - yes API One of the following: ctsm_xml , user_nl_clm , user_nl_clm_history_file , fates , fates_param . type string - yes Model, API One of the following: char , integer , float , logical , date . description string - no UI Detailed description of the parameter. readonly boolean false no UI Whether the parameter can be edited by the user. hidden boolean false no UI Whether the parameter should be hidden from the user. allow_multiple boolean false no API, UI Whether the parameter accepts multiple values. allow_custom boolean false no UI Whether users can enter values other than the ones provided as choices (only applies to those parameters with choices in their validation attribute. validation Validation object - no API, UI See Validation table below ([TODO: X3]). default integer, float, string, boolean - no API A default value to use. It must match the type specified by the type attribute. If allow_multiple is set to true , it must be a list of values. placeholder string - no UI A placeholder value to show to the user. This value is not actually applied if no value is entered by the user. append_input_path boolean false no API Whether to adjust a path value based on its relative location in the input folder. Entered values are checked for correctness with rules defined in the validation attribute. Table 2 describes the currently supported validation rules. Table 2: validation attributes to define which values are accepted for each model parameter Attribute Type Description min float A minimum value for numeric attributes. max float A maximum value for numeric attributes. pattern string A regular expression to match the value against. pattern_error string A custom error message for values not matching the pattern attribute. choices [integer, float, string, boolean] A list of choices for users to select from. Sites in resources/config/sites.json are described as GeoJSON points . The interactive map in the web UI draws on these site definitions. Their configuration is set in the properties attribute of the GeoJSON object, as described in table 3. Table 3: Site geoJSON properties, compare with the sites.json file in /resources/config Attribute Type Required Description name string yes Name of the site. compset string yes The component set to use with the model. res string yes The resolution/grid to use with the model. config [Config object] no Config is an object with two keys: name and value . The former must point to a parameter in resources/config/variables_config.json . The latter must be a valid value for that parameters. These are used as default values for the given parameter for the site.","title":"Model parameters and site configuration"},{"location":"documentation/#running-the-noresm-lsp-remotely","text":"Containerisation of software like the NorESM-LSP and models (NorESM, CLM, FATES) makes it possible to publish it on other services, e.g. cloud computing services where users can sign up and run model experiments remotely. That way, users don't have to install anything on their own computers. For long or multiple experiments, using remote computing resources may be necessary. An early version of the NorESM-LSP exists on Galaxy, a free and open cloud computing service. It is also possible to run the NorESM-LSP on a remote computer, like a research-infrastructure computer cluster (e.g. NREC, Saga, Fram for University of Oslo users), via an ssh tunnel . If you need to run many or long simulations, a remote computer may be beneficial because it doesn't take up your local computer's resources and doesn't require your local computer to be turned on throughout the simulation time.","title":"Running the NorESM-LSP remotely"},{"location":"documentation/#galaxy-tool-for-fates","text":"Galaxy is free to use and only requires registering as a user. Note that this tool is to be considered a pilot version, and does not include all the functionalities of the NorESM-LSP. It does, on the other hand, include metadata to make it FAIR (Findable, Accessible, Interoperable, Reusable), and has Research Objects on ROHub . Tutorial with the CLM-FATES Galaxy tool Direct link to the CTSM/FATES-EMERALD tool on Galaxy.eu","title":"Galaxy Tool for FATES"},{"location":"documentation/#ssh-tunneling-with-example-for-nrec","text":"These instructions are for installing and using the NoESM-LSP on a remote machine. The remote machine must allow remote access via SSH. If you want to run the NorESM-LSP on a server without SSH capability, you will need to talk to your local IT department to find a different solution. We describe all required steps from scratch and not all steps might be necessary for all virtual/remote machines (e.g. Docker may already be installed). The instructions are tailored for and tested on NREC (remote) and Windows with Ubuntu subsystem (local) and might need adaptations on other systems. On NREC, we use a new instance based on the GOLD Ubuntu 22.04 LTS base image. The commands to install programs etc. may differ for other distributions and operating systems. For Norwegian/University of Oslo users: if you're wondering how to set up a virtual machine on NREC, check out the archived instructions here , and the Norwegian Research and Education Cloud (NREC) documentation .","title":"SSH tunneling, with example for NREC"},{"location":"documentation/#1-run-the-platform-remotely","text":"1.1 Open a terminal that has the ssh command installed and access the remote machine (e.g. users at the University of Oslo can run a Virtual Machine on NREC ): ssh [user]@[ip] # for example: ssh ubuntu@158.37.65.132 1.2 Use Git to clone the NorESM-LSP repository (install Git first if necessary): git clone https://github.com/NorESMhub/noresm-land-sites-platform.git --config core.autocrlf=input and make sure the following lines of code allow users to access its functionalities from the outside. In /noresm-land-sites-platform/docker/api/.env (open with an editor or IDE, e.g. vi .env ), line 2, change to: BACKEND_CORS_ORIGINS=[\"*\"] 1.3 Install Docker and Docker Compose . Subsequently, add the current user to the Docker user group if you get an error related to access rights (may require restarting the terminal when finished): [sudo] usermod -a -G docker $USER newgrp docker 1.4 Start a new named screen session: screen -S lsp May require sudo/admin rights and the installation of screen , e.g. on Debian/Ubuntu: [sudo] apt install screen 1.5 Change into the project directory via cd noresm-land-sites-platform and install the NorESM-LSP via docker-compose up or docker compose up (depends on the Docker installation; also described in the user guide). 1.6 Once everyting is up and running, detach your current screen session by subsequently pressing CTRL+a and CTRL+d . The session should now appear when you type [sudo] screen -list . 1.7 Open a new local terminal and enable ssh port listening to the relevant NorESM-LSP ports: ssh -L 8000:localhost:8000 -N -f [user]@[ip] # API ssh -L 8080:localhost:8080 -N -f [user]@[ip] # GUI ssh -L 8888:localhost:8888 -N -f [user]@[ip] # JupyterLab ssh -L 5800:localhost:5800 -N -f [user]@[ip] # Panoply where [user]@[ip] must be the same as in step 1.1 You will probably need to enter your password each time you open a port. Attention! If any of these ports are already in use, change the number after the second colon or execute step 1.9 and retry this step. 1.8 Open your local browser and access the NorESM-LSP tools of your choice. Enter into the address bar (remember to adapt the port numbers if you changed them in step 1.7): localhost:8000/api/v1/docs # API dashboard localhost:8080 # GUI localhost:8888 # JupyterLab localhost:5800 # Panoply You can now build/run model experiments as usual. Once the models are running, you can close the browser and shut off your computer. If you restart your machine, re-execute step 7 to be able to access the programs again. 1.9 To stop the port listening described above manually: fuser -k 8080/tcp fuser -k 8000/tcp fuser -k 8888/tcp fuser -k 5800/tcp where the port numbers must correspond to the numbers you specified in step 1.7. 1.10 Once you are ready to shut off the NorESM-LSP, reattach the screen session via: screen -r lsp and stop the running containers ( CTRL+c ). To kill the screen session, detach ( CTRL+a and CTRL+d ) and enter: screen -XS lsp quit 2 Download the results To download the results to your local machine, you can either use a dedicated file transfer program such as WinSCP or bash commands such as scp . To copy a case folder from the remote server using scp : scp -r [user]@[ip]:[remote_path_to_lsp]/resources/cases/[case_folder_name] [local_save_path] For example: # Note the trailing dot, which denotes copying into the current working directory! scp -r ubuntu@158.37.65.123:/home/ubuntu/noresm-land-sites-platform/resources/cases/5994e825658b853b95d61feccffd18ad_bor1-1000y . Be aware that model outputs for long simulations can result in large file sizes; make sure you have enough space available on your disk. This is the end of the technical documentation. Do you see a mistake, did we forget to describe something, or do you have more questions? Please let us know by posting an issue","title":"1. Run the platform remotely"},{"location":"land-sites/","text":"NorESM land sites NorESM-LSP simulations are at the site level, also called single-point or single-(grid)cell simulations. This page describes The integrated sites where we have prepared all the necessary data. How to create a custom site by uploading a zipped data file with input data and site coordinates, created with the subset_data script developed at NCAR for the land model. If you have access to a place with huge storage space (usually on a supercomputer) you can follow the instructions in ctsm-api/data/readme.md . How to add new sites permanently to the LSP so everyone can use them 1. Integrated sites To run simulations, it's necessary to subset large, global data files that are inconvenient or impossible to download on a laptop. We therefore offer a set of integrated sites so it's easy to get started with modelling. Creating your own site can be challenging for beginners and requires supercomputer access (or terrabytes of available storage). It is also possible to download the input data for an existing site and modify it in e.g. JupyterLab or R, but do this at your own risk. Note that the default data for the sites are subset by matching site coordinates with a gridcell in the data set. The coordinates could be located in the center or periphery of that gridcell. The default data are also quite coarse in resolution, which means that when the landscape around the site is not flat and uniform, the data values may be unrepresentative for the site. The value will instead represent the average of the whole gridcell, which may include deep valleys and tall peaks and everything in between. Keep this in mind when interpreting the results of your simulations. We currently have 20 integrated sites, divided into LATICE-MIP sites and Vestland Climate Grid sites. These locations are established study sites with climatic, and/or ecological data available. Each group of sites have similar data and are easier to compare, whereas sites from different groups might have different kinds of data. Detailed site descriptions and links to data providers are listed below for each group. NB! Note that the data from the sources we link to here may be subject to terms specified in the individual data papers and repositories, such as usage statements requiring authorship or acknowledgement. Check these terms before publishing any data (e.g in papers, theses, or public presentations)! 8 climate station sites of interest to the LATICE group and the 12 Vestland climate grid sites . You can use the site GEOJSON file to conveniently create custom maps. Here is an example to plot site locations with a background map in R. LATICE-MIP sites LATICE-MIP is a coordinated effort to utilise field measurements at different sites for land surface modelling activities in Norway. Currently, eight sites provide flux tower and surface data representing the latitudinal gradient between 60\u00b0 and 78\u00b0 N in Norway including Svalbard. The most prominent site is the Finse Eco-Hydrological Observatory (EcHO; http://mn.uio.no/latice/infrastructure/ [accessed 2022-06-21]) (Pirk et al. in prep), located at 1200 m above sea level. Lakes and rivers, alpine heathland, open fens, and snowbeds dominate the land surface around the observatory (Bryn and Horvath 2020). Finse has a long research history in alpine biology, glaciology, and geology, and high quality and -resolution data for solving and tracking surface energy balance, CO 2 , and H 2 O fluxes between the land and the atmosphere. Site-specific information and links to data sources are provided in the table below. Site name Station name Lon (X) Lat (Y) Elevation, m (Z) Data Data years Data types Description FNS Finse_fluxtower 7.527008533 60.59383774 1210 Feb 2018 - present Long wave in (LWin), Long wave out (LWout), Short wave in (SWin), Short wave out (SWout), turbulent heat fluxes, 10 m air temperature, air pressure, 4.4 m wind speed and direction, snow depths (surveys and single point), H2O, CO2, soil temperature, soil vol. water, soil conductivity, drone images Above current climatic tree- and forest lines. Alpine ridges, wetlands, lakes, heather and snowbed vegetation. mn.uio.no/latice/infrastructure HIS1 Hisaasen_up 12.25481033 61.10516357 681 June 2019 - present Long wave in (LWin), Long wave out (LWout), Short wave in (SWin), Short wave out (SWout), turbulent heat fluxes, 2 m air temperature, air pressure, 2.8 m wind speed and direction, rain HIS2 hisaasen_low 12.25089836 61.1115036 642 \" \" ISK Iskoras_EC 25.29547425 69.3408715 357 Some data in supporting information: doi.org/10.1029/2018JF004945 \" AAS Aas 10.781667 59.660278 93.2 Precipitation, temperature, wind, air pressure, snow depth, EC measurements HUR Hurdal 11.078142 60.372387 270 BYV Bayelva 11.83334 78.92094 56 https://doi.org/10.5194/essd-10-355-2018 , see also doi.org/10.1029/2020GL092256 1998\u20132017 permafrost, active layer and meteorological conditions ADV Adventdalen 15.91667 78.18333 21 https://fluxnet.org/doi/FLUXNET2015/SJ-Adv 2011-2014 Other relevant papers: Pirk, N., Aalstad, K., Westermann, S., Vatne, A., van Hove, A., Tallaksen, L. M., Cassiani, M., and Katul, G.: Inferring surface energy fluxes using drone data assimilation in large eddy simulations, Atmos. Meas. Tech. Discuss, in review, 2022 (His\u00e5sen and Iskoras data used) Details from the Finse flux tower. Photo from Finse EcHO Vestland climate grid sites The Vestland climate grid is a set of calcareous grassland sites across gradients of precipitation and temperature. The sites host many ecological reseach projects that study vegetation dynamics, plant interactions, functional traits and climate responses. Each site also has loggers for temperature and other climatic variables. Central data papers and sources: Vandvik et al. 2022 Vestland Climate Grid on OSF FunCaB on Zenodo Coming soon: INCLINE Coming soon: SeedClim Site name Name Lon (X) Lat (Y) Elevation (Z) Data years Data types Description ALP1 Ulvehaugen 8.12343 61.0243 1208 2008-2022 Vegetation surveys, vegetation demography, experimental treatments, weather data: [to be added] Above current climatic forest line. Semi-natural grassland, heather, ridges and snowbeds ALP2 Laavisdalen 7.27596 60.8231 1097 \" \" ALP3 Gudmedalen 7.17561 60.8328 1213 \" \" ALP4 Skjellingahaugen 6.41504 60.9335 1088 \" \" SUB1 Aalrust 8.70466 60.8203 815 Just below current climatic forest line. SUB2 Hoegsete 7.17666 60.8760 700 \" \" SUB3 Rambaera 6.63028 61.0866 769 \" \" SUB4 Veskre 6.51468 60.5445 797 \" \" BOR1 Fauske 9.07876 61.0355 589 Well below current climatic forest line. BOR2 Vikesland 7.16982 60.8803 474 \" \" BOR3 Arhelleren 6.33738 60.6652 431 \" \" BOR4 Oevstedal 5.96487 60.6901 346 \" \" Figure 1: Illustration of the Vestland Climate Grid, from the SeedClim project: turf squares (top soil, roots and whole plants) were cut out and physically transplanted to other sites, as indicated by the arrows in the top left corner. The vegetation in these turfs was carefully monitored over several years in their new locations, to see how and how quickly the plants adapted to a new environment. Figure by V. Vandvik et al., betweenthefjords.w.uib.no Figure 2: Field work at Ulvehaugen (ALP1) in 2019. Ragnhild Gya and Joachim T\u00f6pper doing vegetation analysis in a 25x35cm metal frame. The small, white ( Tomst ) loggers track temperature and soil moisture, and the small weather station (wooden pole to the right) tracks additional weather data. The fence keeps sheep and other animals away from the plots, but the vegetation is semi-natural after decades or centuries of grazing. The clear, hexagonal Open-Top Chambers experimentally heat up the vegetation. Photo by E. Lieungh 2. Custom sites To create a custom site, you need the site coordinates, and to subset global files or to modify existing ones. The easy way of subsetting data, using the NCAR-developed subset_data script and user_mods directory, requires huge storage space for the global files, e.g. on a supercomputer. Follow the instructions in this NorESMhub/ctsm-api/data/README.md (written for the NorESM-LSP using Saga , or look at other tutorials, e.g. the CTSM 2022 Tutorial (tailored for the Cheyenne supercomputer) or the NorESM single point tutorial (tailored for Fram supercomputer). Before you start to run simulations, compare your zipped file to the input data for one of the integrated sites to double-check if it has the same structure. To run simulations at a custom site, upload the zipped input data file under the Create case for custom site button in the user interface (localhost:8080). There you get the same popup as the integrated sites, with options to change e.g. CO2 concentration or Plant Functional Types to include. 3. Adding sites permanently To make a site integrated and visible to everyone, you need to create zipped data for the new site(s) (see 2. Custom sites above) make a pull request to upload the zipped input file to NorESMhub/noresm-lsp-data/sites (or another stable storage url where it can be downloaded from). Then, add the site(s) to your fork/branch of noresm-land-sites-platform/resources/config/sites.json following the same template as the other sites, and make a new pull request. You can also request new sites to be integrated via GitHub . This requires the developers to do the work for you, so you should have a clear reason to request a new site.","title":"Sites"},{"location":"land-sites/#noresm-land-sites","text":"NorESM-LSP simulations are at the site level, also called single-point or single-(grid)cell simulations. This page describes The integrated sites where we have prepared all the necessary data. How to create a custom site by uploading a zipped data file with input data and site coordinates, created with the subset_data script developed at NCAR for the land model. If you have access to a place with huge storage space (usually on a supercomputer) you can follow the instructions in ctsm-api/data/readme.md . How to add new sites permanently to the LSP so everyone can use them","title":"NorESM land sites"},{"location":"land-sites/#1-integrated-sites","text":"To run simulations, it's necessary to subset large, global data files that are inconvenient or impossible to download on a laptop. We therefore offer a set of integrated sites so it's easy to get started with modelling. Creating your own site can be challenging for beginners and requires supercomputer access (or terrabytes of available storage). It is also possible to download the input data for an existing site and modify it in e.g. JupyterLab or R, but do this at your own risk. Note that the default data for the sites are subset by matching site coordinates with a gridcell in the data set. The coordinates could be located in the center or periphery of that gridcell. The default data are also quite coarse in resolution, which means that when the landscape around the site is not flat and uniform, the data values may be unrepresentative for the site. The value will instead represent the average of the whole gridcell, which may include deep valleys and tall peaks and everything in between. Keep this in mind when interpreting the results of your simulations. We currently have 20 integrated sites, divided into LATICE-MIP sites and Vestland Climate Grid sites. These locations are established study sites with climatic, and/or ecological data available. Each group of sites have similar data and are easier to compare, whereas sites from different groups might have different kinds of data. Detailed site descriptions and links to data providers are listed below for each group. NB! Note that the data from the sources we link to here may be subject to terms specified in the individual data papers and repositories, such as usage statements requiring authorship or acknowledgement. Check these terms before publishing any data (e.g in papers, theses, or public presentations)! 8 climate station sites of interest to the LATICE group and the 12 Vestland climate grid sites . You can use the site GEOJSON file to conveniently create custom maps. Here is an example to plot site locations with a background map in R.","title":"1. Integrated sites"},{"location":"land-sites/#latice-mip-sites","text":"LATICE-MIP is a coordinated effort to utilise field measurements at different sites for land surface modelling activities in Norway. Currently, eight sites provide flux tower and surface data representing the latitudinal gradient between 60\u00b0 and 78\u00b0 N in Norway including Svalbard. The most prominent site is the Finse Eco-Hydrological Observatory (EcHO; http://mn.uio.no/latice/infrastructure/ [accessed 2022-06-21]) (Pirk et al. in prep), located at 1200 m above sea level. Lakes and rivers, alpine heathland, open fens, and snowbeds dominate the land surface around the observatory (Bryn and Horvath 2020). Finse has a long research history in alpine biology, glaciology, and geology, and high quality and -resolution data for solving and tracking surface energy balance, CO 2 , and H 2 O fluxes between the land and the atmosphere. Site-specific information and links to data sources are provided in the table below. Site name Station name Lon (X) Lat (Y) Elevation, m (Z) Data Data years Data types Description FNS Finse_fluxtower 7.527008533 60.59383774 1210 Feb 2018 - present Long wave in (LWin), Long wave out (LWout), Short wave in (SWin), Short wave out (SWout), turbulent heat fluxes, 10 m air temperature, air pressure, 4.4 m wind speed and direction, snow depths (surveys and single point), H2O, CO2, soil temperature, soil vol. water, soil conductivity, drone images Above current climatic tree- and forest lines. Alpine ridges, wetlands, lakes, heather and snowbed vegetation. mn.uio.no/latice/infrastructure HIS1 Hisaasen_up 12.25481033 61.10516357 681 June 2019 - present Long wave in (LWin), Long wave out (LWout), Short wave in (SWin), Short wave out (SWout), turbulent heat fluxes, 2 m air temperature, air pressure, 2.8 m wind speed and direction, rain HIS2 hisaasen_low 12.25089836 61.1115036 642 \" \" ISK Iskoras_EC 25.29547425 69.3408715 357 Some data in supporting information: doi.org/10.1029/2018JF004945 \" AAS Aas 10.781667 59.660278 93.2 Precipitation, temperature, wind, air pressure, snow depth, EC measurements HUR Hurdal 11.078142 60.372387 270 BYV Bayelva 11.83334 78.92094 56 https://doi.org/10.5194/essd-10-355-2018 , see also doi.org/10.1029/2020GL092256 1998\u20132017 permafrost, active layer and meteorological conditions ADV Adventdalen 15.91667 78.18333 21 https://fluxnet.org/doi/FLUXNET2015/SJ-Adv 2011-2014 Other relevant papers: Pirk, N., Aalstad, K., Westermann, S., Vatne, A., van Hove, A., Tallaksen, L. M., Cassiani, M., and Katul, G.: Inferring surface energy fluxes using drone data assimilation in large eddy simulations, Atmos. Meas. Tech. Discuss, in review, 2022 (His\u00e5sen and Iskoras data used) Details from the Finse flux tower. Photo from Finse EcHO","title":"LATICE-MIP sites"},{"location":"land-sites/#vestland-climate-grid-sites","text":"The Vestland climate grid is a set of calcareous grassland sites across gradients of precipitation and temperature. The sites host many ecological reseach projects that study vegetation dynamics, plant interactions, functional traits and climate responses. Each site also has loggers for temperature and other climatic variables. Central data papers and sources: Vandvik et al. 2022 Vestland Climate Grid on OSF FunCaB on Zenodo Coming soon: INCLINE Coming soon: SeedClim Site name Name Lon (X) Lat (Y) Elevation (Z) Data years Data types Description ALP1 Ulvehaugen 8.12343 61.0243 1208 2008-2022 Vegetation surveys, vegetation demography, experimental treatments, weather data: [to be added] Above current climatic forest line. Semi-natural grassland, heather, ridges and snowbeds ALP2 Laavisdalen 7.27596 60.8231 1097 \" \" ALP3 Gudmedalen 7.17561 60.8328 1213 \" \" ALP4 Skjellingahaugen 6.41504 60.9335 1088 \" \" SUB1 Aalrust 8.70466 60.8203 815 Just below current climatic forest line. SUB2 Hoegsete 7.17666 60.8760 700 \" \" SUB3 Rambaera 6.63028 61.0866 769 \" \" SUB4 Veskre 6.51468 60.5445 797 \" \" BOR1 Fauske 9.07876 61.0355 589 Well below current climatic forest line. BOR2 Vikesland 7.16982 60.8803 474 \" \" BOR3 Arhelleren 6.33738 60.6652 431 \" \" BOR4 Oevstedal 5.96487 60.6901 346 \" \" Figure 1: Illustration of the Vestland Climate Grid, from the SeedClim project: turf squares (top soil, roots and whole plants) were cut out and physically transplanted to other sites, as indicated by the arrows in the top left corner. The vegetation in these turfs was carefully monitored over several years in their new locations, to see how and how quickly the plants adapted to a new environment. Figure by V. Vandvik et al., betweenthefjords.w.uib.no Figure 2: Field work at Ulvehaugen (ALP1) in 2019. Ragnhild Gya and Joachim T\u00f6pper doing vegetation analysis in a 25x35cm metal frame. The small, white ( Tomst ) loggers track temperature and soil moisture, and the small weather station (wooden pole to the right) tracks additional weather data. The fence keeps sheep and other animals away from the plots, but the vegetation is semi-natural after decades or centuries of grazing. The clear, hexagonal Open-Top Chambers experimentally heat up the vegetation. Photo by E. Lieungh","title":"Vestland climate grid sites"},{"location":"land-sites/#2-custom-sites","text":"To create a custom site, you need the site coordinates, and to subset global files or to modify existing ones. The easy way of subsetting data, using the NCAR-developed subset_data script and user_mods directory, requires huge storage space for the global files, e.g. on a supercomputer. Follow the instructions in this NorESMhub/ctsm-api/data/README.md (written for the NorESM-LSP using Saga , or look at other tutorials, e.g. the CTSM 2022 Tutorial (tailored for the Cheyenne supercomputer) or the NorESM single point tutorial (tailored for Fram supercomputer). Before you start to run simulations, compare your zipped file to the input data for one of the integrated sites to double-check if it has the same structure. To run simulations at a custom site, upload the zipped input data file under the Create case for custom site button in the user interface (localhost:8080). There you get the same popup as the integrated sites, with options to change e.g. CO2 concentration or Plant Functional Types to include.","title":"2. Custom sites"},{"location":"land-sites/#3-adding-sites-permanently","text":"To make a site integrated and visible to everyone, you need to create zipped data for the new site(s) (see 2. Custom sites above) make a pull request to upload the zipped input file to NorESMhub/noresm-lsp-data/sites (or another stable storage url where it can be downloaded from). Then, add the site(s) to your fork/branch of noresm-land-sites-platform/resources/config/sites.json following the same template as the other sites, and make a new pull request. You can also request new sites to be integrated via GitHub . This requires the developers to do the work for you, so you should have a clear reason to request a new site.","title":"3. Adding sites permanently"},{"location":"resources/","text":"External tutorials and resources Do you need more information? Here are some useful links. While the NorESM-LSP provides an easy interface to run model experiments with the NorESM-CLM-FATES model, interpreting the results and setting up high-quality simulations can be time-consuming and requires specialist knowledge about the models and theoretical knowledge of Earth System science. Here we collect some useful links to tutorials and other resources where you can learn more. If you are new to modelling but want to publish something, it might be a good idea to reach out to someone who is more familiar with the models to find collaborators on your project. The model framework consists of the Norwegian Earth System Model (NorESM), the Community Land Model (CLM), and the Functionally Assembled Terrestrial Ecosystem Simulator (FATES). Each model has its own documentation and tutorials. This page collects some training resources we have found and think are relevant, but is by no means an exhaustive list. Tutorials, courses, papers, and books Courses for students and researchers CLM/CTSM course at NCAR in Boulder, Colorado (USA). See this overview of tutorials . NCAR is the main development hub for the FATES and CLM models, and the Earth System Model CESM (which is similar to NorESM). 10 ETCS course in Ecological Climatology at the University of Oslo, Norway. MSC and PhD level interdisciplinary course for geoscience and biology. Some of the course teachers are involved in developing the NorESM-LSP, and from 2022 the course includes a 1-day data lab with the NorESM-LSP. Tutorials you can do from home FATES documentation and user guide . See especially the FAQ and this slide deck from a 2019 tutorial . The NCAR-NEON collaboration model-data integration project aimed at beginners and researchers in other fields. Their tutorials are very good for learning about CLM (but does not include FATES yet), and they include example code for visualization of output with Jupyter notebooks. The university of Bergen has a beginner-friendly intro to earth system science at Explore the Earth System (click on land, ocean, etc. for more info!) Scientific papers to get an overview Fisher and Koven 2020 \"Perspectives on the Future of Land Surface Models and the Challenges of Representing Complex Terrestrial Systems\" Kyker-Snowman et al. 2022 \"Increasing the spatial and temporal impact of ecological research: A roadmap for integrating a novel terrestrial process into an Earth system model\" Blyth et al. 2021 \"Advances in Land Surface Modelling\" Bonan & Doney 2018 \"Climate, ecosystems, and planetary futures: The challenge to predict life in Earth system models\" Books Open-access: Luo and Smith (eds.) 2022 \"Land Carbon Cycle Modeling: Matrix Approach, Data Assimilation, & Ecological Forecasting\" Bonan 2015 \"Ecological Climatology: Concepts and Applications\" Model-specific documentation and code FATES Technical documentation User guide GitHub repository Get involved and stay updated with the FATES google group (need to ask for access) and attend bi-weekly meetings on zoom. CLM Technical documentation and user guide GitHub repository The NCAR-NEON collaboration (model-data integration project aimed at beginners) NorESM Technical documentation and user guide GitHub repository Do you know of a good course or other resource that belongs on this page? Please let us know by opening an issue .","title":"External tutorials and resources"},{"location":"resources/#external-tutorials-and-resources","text":"Do you need more information? Here are some useful links. While the NorESM-LSP provides an easy interface to run model experiments with the NorESM-CLM-FATES model, interpreting the results and setting up high-quality simulations can be time-consuming and requires specialist knowledge about the models and theoretical knowledge of Earth System science. Here we collect some useful links to tutorials and other resources where you can learn more. If you are new to modelling but want to publish something, it might be a good idea to reach out to someone who is more familiar with the models to find collaborators on your project. The model framework consists of the Norwegian Earth System Model (NorESM), the Community Land Model (CLM), and the Functionally Assembled Terrestrial Ecosystem Simulator (FATES). Each model has its own documentation and tutorials. This page collects some training resources we have found and think are relevant, but is by no means an exhaustive list.","title":"External tutorials and resources"},{"location":"resources/#tutorials-courses-papers-and-books","text":"","title":"Tutorials, courses, papers, and books"},{"location":"resources/#courses-for-students-and-researchers","text":"CLM/CTSM course at NCAR in Boulder, Colorado (USA). See this overview of tutorials . NCAR is the main development hub for the FATES and CLM models, and the Earth System Model CESM (which is similar to NorESM). 10 ETCS course in Ecological Climatology at the University of Oslo, Norway. MSC and PhD level interdisciplinary course for geoscience and biology. Some of the course teachers are involved in developing the NorESM-LSP, and from 2022 the course includes a 1-day data lab with the NorESM-LSP.","title":"Courses for students and researchers"},{"location":"resources/#tutorials-you-can-do-from-home","text":"FATES documentation and user guide . See especially the FAQ and this slide deck from a 2019 tutorial . The NCAR-NEON collaboration model-data integration project aimed at beginners and researchers in other fields. Their tutorials are very good for learning about CLM (but does not include FATES yet), and they include example code for visualization of output with Jupyter notebooks. The university of Bergen has a beginner-friendly intro to earth system science at Explore the Earth System (click on land, ocean, etc. for more info!)","title":"Tutorials you can do from home"},{"location":"resources/#scientific-papers-to-get-an-overview","text":"Fisher and Koven 2020 \"Perspectives on the Future of Land Surface Models and the Challenges of Representing Complex Terrestrial Systems\" Kyker-Snowman et al. 2022 \"Increasing the spatial and temporal impact of ecological research: A roadmap for integrating a novel terrestrial process into an Earth system model\" Blyth et al. 2021 \"Advances in Land Surface Modelling\" Bonan & Doney 2018 \"Climate, ecosystems, and planetary futures: The challenge to predict life in Earth system models\"","title":"Scientific papers to get an overview"},{"location":"resources/#books","text":"Open-access: Luo and Smith (eds.) 2022 \"Land Carbon Cycle Modeling: Matrix Approach, Data Assimilation, & Ecological Forecasting\" Bonan 2015 \"Ecological Climatology: Concepts and Applications\"","title":"Books"},{"location":"resources/#model-specific-documentation-and-code","text":"","title":"Model-specific documentation and code"},{"location":"resources/#fates","text":"Technical documentation User guide GitHub repository Get involved and stay updated with the FATES google group (need to ask for access) and attend bi-weekly meetings on zoom.","title":"FATES"},{"location":"resources/#clm","text":"Technical documentation and user guide GitHub repository The NCAR-NEON collaboration (model-data integration project aimed at beginners)","title":"CLM"},{"location":"resources/#noresm","text":"Technical documentation and user guide GitHub repository Do you know of a good course or other resource that belongs on this page? Please let us know by opening an issue .","title":"NorESM"},{"location":"user_guide/","text":"User guide This is the user guide for running single-site simulations with the NorESM LandSites Platform . It guides you through installing the software and how to use the Graphical User Interface (GUI) and the analysis tools in JupyterLab . More information about the LSP and the model framework is available in our technical documentation . If you want to learn more about the FATES, CLM, and NorESM models, we have collected some useful links to tutorials and documentation in the external resources page . NB! Note that the default values and input data we provide are sufficient for educational uses, but should not be considered high-quality model experiments. If your goal is to set up high-quality model experiments, you might want to modify or provide your own input data, set up long spin-up simulations to reach a steady-state, and think about model calibration and validation. While the LSP makes it easier to model, you the user are responsible for following good ethical and scientific practices according to your purposes. Note also that we (the LSP development team) are not responsible for the models themselves, and that data downloaded from external sources may have terms and conditions of use. Make sure to read and follow the terms and properly credit the relevant models, software, and data if you plan to publish your model experiment! TL;DR quick start \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfc3\u200d\u2642\ufe0f If you have already completed first-time setup and know what you are doing, here is the extremely quick user guide. In a terminal where you have the repository: cd noresm-land-sites-platform docker-compose up Open the GUI: localhost:8080 and push buttons, and access jypyter notebooks on localhost:8888 and Panoply on localhost:5800 \ud83c\udf89 An overview of the LSP software Illustration of the user interfaces and a simplified software architecture. From your browser, you can access this user guide and our technical documentation, as well as the GUI, JupyterLab and Panoply servers once the containers are up and running (see 0. Prerequisites and 1. Starting the containers below). Containers provide virtual computing environments where we can run the model and the software can communicate with each other. Repositories (versioned file structures) with the code for the NorESM-LSP and models are stored on GitHub. Input data is downloaded to the containers from external storage, and model output is stored locally in the user's copy of the repository. See the Software Architecture description in the technical documentation for more details. Step by step guide for using the platform Check out our glossary of technical terms . If you want to use the LSP on a remote computer, see the SSH tunnel instructions . 0. Prerequisites (first time setup) \ud83c\udf31 To use the NorESM land sites platform, you need Git , Docker desktop , and about 15-20GB of available disk space before you can clone the repository (= download the code) and start working in the containers. You may need administrator rights to your computer to install Git and Docker. If you don't want to use Git, you can try to download and unpack the repository manually instead by clicking the code button and download zip . Note that some Mac computers may be difficult to run on , but otherwise any operating system that can run Docker should work. Step by step (with steps in brackets only sometimes necessary, depending on your computer): Create a GitHub account (optional, but generally recommended to be able to open issues, etc.) Install Git on your machine. For Windows: https://gitforwindows.org/, other: https://github.com/git-guides/install-git Install Docker desktop , might require restart (Install Docker Compose; should already be included in the Docker installation described above for Mac and Windows: install docker-compose ) (Remarks for Windows: You may have to install WSL2 (the 'two' is important here) manually if prompted. Follow the steps described here . To open the Windows Command Prompt terminal as an administrator, type cmd into the Windows search bar located next to the Start Symbol (lower-left corner of the screen), right-click on 'Command Prompt', and select 'Run as administrator'. Also, note that some steps in the guide are executed in the 'Command Prompt' and some are executed in the 'Windows PowerShell'; to open the latter, type 'PowerShell' into the search bar and open as administrator. If Docker complains about you not belonging to the correct 'user group' after successful installation, follow the steps described here ) Open the file explorer and find a suitable folder to serve as working directory. This is where you will store the repository and installation files needed by the platform, as well as your output files (which may take up quite a bit of space!). Your working directory should be easy to find, stable, and have plenty of free space available. For instance C:/Users/yourusername (OneDrive, USB sticks, or your overly-cluttered desktop are not recommended \ud83d\udc40). When you are in your chosen working directory, right-click and choose \"Git Bash here\" (Windows). You can also directly use cd [path_to_working_directory] in a terminal with Git installed. Copy and paste the following line into the terminal (note that in some terminals such as Git Bash, you need to click the right mouse button to paste from the clipboard): git clone https://github.com/NorESMhub/noresm-land-sites-platform.git --config core.autocrlf=input This will download (= clone) the repository (= folder structure of files with version history) to your working directory. You can now see the folder and files in your file explorer. Once Git, Docker Desktop and the repository are in place, you don't have to do this again. 1. Start the container \ud83e\uddf0 In the working directory where you have cloned the repository, open a terminal (e.g. by right-clicking and choosing \"Git Bash here\"; or use the one you already have open if you just did the first-time setup). Then write these commands (hit enter after each line) to get the container up and running: cd noresm-land-sites-platform docker-compose up If you get an error, make sure you are inside the folder containing the docker-compose.yaml file. Type ls and hit enter to list the files in the current folder. You can c hange d irectories by typing cd foldername to get inside foldername, and cd .. to move up to the parent folder. Tip! Press Tab to autocomplete a folder or file name after typing the first letter(s). If your browser tab ( localhost:8080 ) displays an error, it might be because the container is still being set up. Give it some time and refresh the page. The first time you execute this command, a lot of files will be downloaded. This might take half an hour or so depending on your internet connection. After this initial download, it will be much faster (<1min). Once the terminal messages stop, you can access the user interface by going to this address in a new browser tab: localhost:8080 . 2. Inside GUI: Set simulation settings \u2699\ufe0f In the graphical user interface (= GUI) at localhost:8080 you can easily set up and run model experiments. This interface has access to the Docker containers you started in step 1, and communicates with the models via the API . In the GUI, you will see a list and map of integrated sites, as well as a list of your cases (model experiments) once you create some. You can also run a simulation for a new site with your own input data . If you are doing a quick test with default settings, just pick a site and click create case , submit and then run . A default test case of 1 year should take ~10-20 mins. Attention. The first time you run a case, the model will download some global datasets of approx. 10GB total into data/shared . Expect your first simulation to take significantly longer! The GUI should look like this once you have chosen a site and have submitted and started to run a case: Figure 1: Screenshot from the GUI with a case created for the ALP1 site. Edited for readability. 2.1 Choose a site ...by clicking either a button or a point on the map! Or add a new site with your own data . 2.2 Download site data button (optional) For the integrated sites, the input data the models need is already available in the container. With the download site data button you can download it to somewhere else if you wish. We provide notebooks under notebooks/plot_input_data/ that you can open in Jupyterlab on localhost:8888 to familiarize yourself with some of the data that goes into a simulation, or as inspiration for making your own plots if you provided your own, improved input data. This is a good thing to do while your case is running. 2.3 Create case With the create case button, you can look at and edit some model settings and parameters as you create a new case. To run a simulation, you need to set up a case which tells the model how to run. For more detailed information on what goes on in CLM and its coupler (which connects CLM to other model components), see this CIME user guide , but note that the NorESM modelling platform uses these commands and scripts more indirectly through the GUI and API. When you add a new site, the data upload and create case popup is combined. Once you have chosen a site, you get options to download site data (optional) and to create a new case. When you create a new case, you can change some model parameters as described below. Note that there are five tabs with different types of case and model settings, grouped into Case, Run Environment, CLM namelist, History fields, and FATES settings. This is not an exhaustive list of possible changes (by far), but give you easy access to some options in the different tabs. Under CLM Namelist settings, there is an Advanced box were experienced users can customise the CLM namelist by providing [parameter]=[value] input. All the boxes have default values for a quick but not especially realistic simulation. Note that you generally just need to touch four of the Run environment settings: STOP_N and STOP_OPTION to set the simulation length, and DATM_YR_START and DATM_YR_END to specify which years to use data from. If you change the starting year (DATM_YR_START), it's often best to change RUN_STARTDATE to the start of the same year. Screenshot of the pop-up triggered with the Create Case button. Notice the different tabs that give you access to different settings: case, run environment controlling simulation time, CLM namelist settings, history files controlling output files, and FATES parameters. Case settings Case name Free text. Specify a name for your case. This will be combined with a unique ID number generated randomly. Good case names say something about e.g. site, settings, or simulation period. For example: ALP1-10yr-default, ADV-1000yr-400ppm, FNS-200yr-notreepft Driver name Dropdown. 'nuopc' by default since 2021 Run environment Calendar Read-only. Calendar can be No-leap or Gregorian. Some climate input data (like our default GSWP3 data set) omits leap years. Gregorian is the 'normal' calendar including leap years. DATM_YR_START Integer (year). Starting year to loop data over. Example: If the input data spans 1900-2014, set = 2000 to tell the model to use the input data from 2000 onwards. DATM_YR_ALIGN Integer (year). Used to align the simulation year with the forcing data set. It specifies the simulation year corresponding to DATM_YR_START. For example, setting DATM_YR_ALIGN=DATM_YR_START means that the forcing calendar will be the same as the model calendar: the forcing for a given model year would be the forcing of the same year. This is appropriate when the model calendar is set up to span the same year range as the forcing data. By setting it to the same year as RUN_STARTDATE (below), the forcing in the first year of the run will be the forcing of year DATM_YR_START. DATM_YR_END Integer (year). Ending year to loop data over. For example: If the input data spans 1900-2010, you may set this to 2005 to tell the model to use the input data up to 2005. If you run a longer simulation than the span between YR_START and YR_END, the input will be looped. RUN_STARTDATE Run start date (yyyy-mm-dd); normally at the start of the same year as YR_START. Only used for startup or hybrid run types. STOP_N Integer. Sets the run length together with STOP_OPTION. It's the number of STOP_OPTION to simulate. E.g. STOP_N=5 and STOP_OPTION=ndays sets a simulation period of 5 days. STOP_OPTION Dropdown. This sets the run length together with STOP_N, and represents the unit of time (years, months, days, seconds, or model timesteps). E.g. STOP_N=5 and STOP_OPTION=ndays sets a simulation period of 5 days. STOP_DATE Integer. Alternative yyyymmdd date option that sets the run length with STOP_OPTION and STOP_N. Negative value implies that this alternative is not used. RUN_TYPE Read-only. Startup : a 'cold' start from bare ground, where the vegetation and climate is not in equilibrium and the model may produce unrealistic output unless it is run for a very long time (hundreds or thousands of years). Startup mode does not allow using spin-up files (='restart' files of an existing simulation where the vegetation and other conditions have reached a steady state). Use this mode for quick testing, or for making your own spin-up. Restart (only available for the legacy LSP version): continues running an existing case after it has been stopped. LND_TUNING_MODE Read-only. Land tuning mode. Tuning parameters and initial conditions for a CLM model version and meteorological forcing combination. CLM namelist simulation settings co2_ppmv Atmospheric CO2 concentration to use when co2_type is constant. fates_spitfire_mode If or how to use advanced fire behaviour with the SPITFIRE module. 0 : Simulations of fire are off, 1 : use a global constant lightning rate found in fates_params, 2 : use an external lightning dataset, 3 : use an external confirmed ignitions dataset (not available through standard CSEM dataset collection), 4 : use external lightning and population datasets to simulate both natural and anthropogenic ignitions. Read more in the FATES documentation use_bedrock True/false. When true (default), a data set overwrites the CLM default soil depth. If present on surface dataset, use depth to bedrock information to specify spatially variable soil thickness. If not present, use bottom of soil column (nlevsoi). Read more in Brunke et al.2016 Advanced Box for coding in additional CLM namelist changes. See the CLM user guide History files By default, the model records output in one tape (hist_fincl1), as one (hist_mfilt=1) average (hist_avgflag_pertape=A), monthly (hist_nhtfrq=0) value, for a subset of variables (Active=T in this list ). Each column in the History files tab corresponds to a history tape, which is a series of files created for the simulation period. If you want output to be recorded for additional variables or at different time steps, you can modify the first column or fill in additional columns to add history tapes. NB! The list of output variables listed in the CTSM documentation may be outdated (because both FATES and CLM develop fast and the documentation and stable versions may lag behind the one we use). The LSP version 1 uses this list of FATES output variables FatesHistoryInterfaceMod.F90 (Warning: code & jargon-heavy text). use_default='inactive' means it is not included in the history tape by default. It can be activated by including the variable name in the hist_fincl fields in the GUI. If you want to run the model without saving any output, set hist_mfilt=0 in the first column. By modifying additional columns, you add tapes (series of files) with e.g. different output variables, recorded at e.g. its maximum value per day. Remember to change hist_mfilt to store the output. Note that some FATES vegetation demographic output is only accessible in a long string format instead of in the default lat-lon grid. FATES settings You can remove or modify Plant Functional Types (PFTs) by checking/unchecking PFTs and typing in custom values for a subset of parameters. The full list of parameters is in the FATES model code . Index no. Plant Functional Type 1 broadleaf_evergreen_tropical_tree 2 needleleaf_evergreen_extratrop_tree 3 needleleaf_colddecid_extratrop_tree 4 broadleaf_evergreen_extratrop_tree 5 broadleaf_hydrodecid_tropical_tree 6 broadleaf_colddecid_extratrop_tree 7 broadleaf_evergreen_extratrop_shrub 8 broadleaf_hydrodecid_extratrop_shrub 9 broadleaf_colddecid_extratrop_shrub 10 arctic_c3_grass 11 cool_c3_grass 12 c4_grass Start building your case with the \u00b4SUBMIT\u00b4 button Once you click submit , the case will appear in a list of cases with the case ID, status, creation date, grid information, component set, a link to view the settings you specified, and some buttons with more options. Pay attention to the status, which will transition from pending to ready when the case has been built. 3. Run your simulations \ud83d\udc69\u200d\ud83d\udcbb Once the case is ready, you can start the simulation with the run button. There are also buttons to download the output when the run is finished, to copy the case settings as a template to create a new case, and to delete the case. Depending on how long you asked the model to run for, and on your hardware, the simulation can take some time \u23f3. On a regular laptop, one year of simulation of a single site (= gridcell) might take ~5-20 minutes. It may help to not run other heavy programs simultaneously (like GIS, Photoshop or 1000 browser tabs \ud83d\udc40). The Docker container you started in step 1 is performing the simulation using your local computer. If you are running more or longer simulations than your computer can handle, you may want to look at our alternatives for remote simulations . While you wait for the simulation to finish, you may like to inspect the input data more closely to understand what data drives the model. Open a new browser tab and go to the Docker container at localhost:8888 . Navigate to the notebooks/plot_input_data/ folder and go through the notebooks there. They will plot some of the input data for your site that forces the atmospheric model component and provides land surface and soil information. Soon your simulations will be finished! \ud83c\udf89 (Hint: if your case seems to be running forever, try to refresh the webpage! Sometimes it gets stuck.) If you got an error message somewhere along the way, please head over to our GitHub and write an issue describing what happened, what machine you are on (mac/windows/HPC etc.), and copy in the error message and any other relevant information. Progress messages will be printed in the terminal you started the container from. (If you closed the terminal window already, you can see it in Docker desktop by clicking the running container stack.) Output will be stored as monthly averages by default, or at whatever time intervals you set in the history files tab when you created the case. 4. Look at your output \ud83d\udcc8 Model output files are easily accessed in Jupyter lab ( localhost:8888 ) under the resources/cases/<case_id>/archive/lnd/hist/ folder. The Jupyter server fetches the files locally in your copy of the noresm-land-sites-platform repository under resources/cases/<case-id>/archive . In JupyterLab, we have prepared some notebooks (text, code & output documents) for combining output files, creating some basic plots, and comparing model output to observations for some of the sites. Once you open JupyterLab, you will see some folders. Nagivate to the notebooks/ folder and open the combine_nc_files.ipynb notebook. If your simulation recorded one history tape (see explanation above) with monthly average values for a one-year simulation, you should find 12 .nc files in the resources/cases/<case_id>/archive/lnd/hist/ folder. It is generally a good idea to combine these files into one, and the combine_nc_files.ipynb notebook will guide you through doing this. When the history files are combined, you can go on to the notebooks/model_output_analysis folder to see additional notebooks. They will guide you through some ways of looking at the model output and comparing it to published data for the sites where data is available. The notebooks can be modified (use File -> Save Notebook As... to save your own version) with your own code and text. The code cells are read as Python code by default. Run/execute notebook cells with e.g. Ctrl+Enter after clicking it with you cursor. This works both for text (Markdown) and code (Python) cells. You can also use the clickable icons at the top of the notebook, like the play button for running a cell or + for insering a new cell. There are many other ways to analyse the data, and much more model output available! Output can alternatively be opened in Panoply, which is included for at http://localhost:5800/ when containers are running. Panoply is a useful tool to explore the data and get an overview of the available output variables. If you prefer to work with the output outside the NorESM-LSP, output data can also be downloaded to another location with the Download Data button in the GUI. The output NetCDF files can be opened in Panoply locally, or with netCDF-handling packages in e.g. Python or R or on your local computer. 5. Close the container NB! The container will continue to run unless you stop it. When you are finished with simulations and output processing and downloading things you might need offline, go back to your terminal and press Ctrl+c . If you closed the terminal window, you can open a new one, go to the repository ( cd noresm-land-sites-platform/ ) and type in docker-compose down . Alternatively, open Docker desktop, find the containers tab, and shut them down them with the stop button. Model performance and best practices While the LSP makes is easy to perform a simulation, there are many pitfalls to consider when setting up model experiments and interpreting the results. To get realistic results from simulations, three elements must be correct: model structure, model parameterization, and the external forcing data. Getting all three right is difficult even for experienced modellers, but you can get far by being curious and careful in your interpretations. Ask yourself, what can the model actually do (which processes are included in the model structure)? What do the current parameters represent (e.g. for default Plant Functional Types, mortality rates, growth allometry)? Is the forcing data realistic for my site? If you want to improve you model experiment, it's vital to consider your purpose. For example, do you want the output to be as similar as possible to an observed data set? If so, you might tune model parameters and adjust your input (forcing) data. The risk is that you \"get the right result for the wrong reason\", but that might be acceptable depending on your purpose and if you don't extrapolate. Alternatively, one might risk getting completely unrealistic model output even when all parameters and forcing data are correct. The model may lack an important process that produces a result in real life. Model calibration, validation and tuning should therefore be done with great care and according to your purpose of modelling. To learn more about the models and land surface modelling, check out our external resources page . Understanding what you don't know is the first step! Advanced customisation If you need customisation of data, model code, or case setup beyond what is possible through the graphical user interface and JupyterLab, you may access the containers or API directly. You can also use the platform remotely, e.g. via SSH tunnelling . If you have (or create) an .env file in the project root with HOST_USER set in it, use this: docker-compose exec -u <host_user_value> api bash Otherwise, use this: docker-compose exec api bash This will open a terminal in /ctsm-api. The model is in /ctsm-api/resources/model. Cases created with the api go in /ctsm-api/resources/cases, and their data in /ctsm-api/resources/data/ . The build, run, and archive folders are put inside the case folder. Shared data goes in /ctsm-api/resources/data/shared. Reproducibility To make your simulations reproducible by others, e.g. for a thesis or scientific paper, note down the version of the NorESM-LSP and save these three directories that have been created under resources/ in your working directory (e.g. C:/Users/yourusername/noresm-land-sites-platform/resources): the case folder, i.e. \u00b4resources/cases/casename\u00b4 the case input data, i.e. \u00b4resources/data/casename\u00b4 code modifications in overwrites, i.e. \u00b4resources/overwrites\u00b4 You could also simply save the whole 'resources' folder (and get some redundant files). To recreate an old simulation, the LSP might need to be reinstalled. Old case folders can of course be copied into new versions of the LSP, but if there are changes to e.g. python libraries, model code or other software we depend on, there might be errors or slight differences in the output if the case is re-run. To install a specific version, go to GitHub , find the correct version tag/release tag, and clone or download the code from that version. Once the correct version of the repository is in place, copy and pase in the three folders listed above. Make sure the folder structure is the same. Then, bring up the containers again with docker-compose up and voil\u00e0 ! When and how to cite the NorESM-LSP, models, and data If you end up publishing your model experiments, e.g. in a thesis or scientific paper, you need to consider citations, acknowledgements, and authorship invitations carefully. To cite the NorESM-LSP software, see the Contributing and About . When you publish model experiments, you also need to properly cite and acknowledge the model framework: See the licences of NorESM , CLM , FATES . In the Acknowledgements section, it is common practice to add funding information of the models that you use (e.g. the U.S. National Science Foundation for CLM, NGEE-Tropics for FATES). The main publications for each model should also be cited in the main text. If you use observational data, e.g. from the Vestland Climate Grid sites or another integrated site, make sure to look at the licences, rights and conditions attached to those data! Following international standards for research ethics, authorship invitations should be given based on \"substantial contributions to conception and design, acquisition of data, or analysis and interpretation of data\", among other things. Troubleshooting Please help us by reporting errors and questions on our issues page . Things you can try yourself include \"switching it off and on again\" by stopping, deleting, and reinstalling everything carefully. See instructions to uninstall below, and carefully follow steps 6 and 7 from the setup guide before you bring the containers up again with docker-compose up . Updating and uninstalling To install updates, download the new version of the code and container images by typing git pull followed by docker-compose pull into a terminal from your local clone of the repository. To uninstall, open a terminal in your working directory and enter your local clone of the repository (remember ls = list files, cd =change directory). Right-clicking in your working directory file explorer should give you options to open Git Bash or another terminal. If the container (or another process) is running in your terminal, you can stop it with Ctrl+c , or with docker-compose down if you see .../noresm-land-sites-platform$ . To remove the repository, you can type rm -r noresm-land-sites-platform in your working directory. If it complains about permissions you may need sudo in front, and you can use -rf instead of -r. This might require administrator rights to your computer. NB! If you delete the whole repository like this, your existing cases and output data will also be deleted. To delete all Docker containers, images, and other files, also ones in use, use the command docker system prune -a . NB! If you do this, you will need to download all the files again if you want to use the LSP again. It is also possible to delete everything manually in Docker desktop (check containers, images, and volumes tabs), and to delete the repository manually from your working directory. Docker desktop can be uninstalled like any other program, e.g. via you pc's settings. Please help us by reporting errors and questions on our issues page .","title":"User guide"},{"location":"user_guide/#user-guide","text":"This is the user guide for running single-site simulations with the NorESM LandSites Platform . It guides you through installing the software and how to use the Graphical User Interface (GUI) and the analysis tools in JupyterLab . More information about the LSP and the model framework is available in our technical documentation . If you want to learn more about the FATES, CLM, and NorESM models, we have collected some useful links to tutorials and documentation in the external resources page . NB! Note that the default values and input data we provide are sufficient for educational uses, but should not be considered high-quality model experiments. If your goal is to set up high-quality model experiments, you might want to modify or provide your own input data, set up long spin-up simulations to reach a steady-state, and think about model calibration and validation. While the LSP makes it easier to model, you the user are responsible for following good ethical and scientific practices according to your purposes. Note also that we (the LSP development team) are not responsible for the models themselves, and that data downloaded from external sources may have terms and conditions of use. Make sure to read and follow the terms and properly credit the relevant models, software, and data if you plan to publish your model experiment!","title":"User guide"},{"location":"user_guide/#tldr-quick-start","text":"If you have already completed first-time setup and know what you are doing, here is the extremely quick user guide. In a terminal where you have the repository: cd noresm-land-sites-platform docker-compose up Open the GUI: localhost:8080 and push buttons, and access jypyter notebooks on localhost:8888 and Panoply on localhost:5800 \ud83c\udf89","title":"TL;DR quick start \ud83c\udfc3\u200d\u2640\ufe0f\ud83c\udfc3\u200d\u2642\ufe0f"},{"location":"user_guide/#an-overview-of-the-lsp-software","text":"Illustration of the user interfaces and a simplified software architecture. From your browser, you can access this user guide and our technical documentation, as well as the GUI, JupyterLab and Panoply servers once the containers are up and running (see 0. Prerequisites and 1. Starting the containers below). Containers provide virtual computing environments where we can run the model and the software can communicate with each other. Repositories (versioned file structures) with the code for the NorESM-LSP and models are stored on GitHub. Input data is downloaded to the containers from external storage, and model output is stored locally in the user's copy of the repository. See the Software Architecture description in the technical documentation for more details.","title":"An overview of the LSP software"},{"location":"user_guide/#step-by-step-guide-for-using-the-platform","text":"Check out our glossary of technical terms . If you want to use the LSP on a remote computer, see the SSH tunnel instructions .","title":"Step by step guide for using the platform"},{"location":"user_guide/#0-prerequisites-first-time-setup","text":"To use the NorESM land sites platform, you need Git , Docker desktop , and about 15-20GB of available disk space before you can clone the repository (= download the code) and start working in the containers. You may need administrator rights to your computer to install Git and Docker. If you don't want to use Git, you can try to download and unpack the repository manually instead by clicking the code button and download zip . Note that some Mac computers may be difficult to run on , but otherwise any operating system that can run Docker should work. Step by step (with steps in brackets only sometimes necessary, depending on your computer): Create a GitHub account (optional, but generally recommended to be able to open issues, etc.) Install Git on your machine. For Windows: https://gitforwindows.org/, other: https://github.com/git-guides/install-git Install Docker desktop , might require restart (Install Docker Compose; should already be included in the Docker installation described above for Mac and Windows: install docker-compose ) (Remarks for Windows: You may have to install WSL2 (the 'two' is important here) manually if prompted. Follow the steps described here . To open the Windows Command Prompt terminal as an administrator, type cmd into the Windows search bar located next to the Start Symbol (lower-left corner of the screen), right-click on 'Command Prompt', and select 'Run as administrator'. Also, note that some steps in the guide are executed in the 'Command Prompt' and some are executed in the 'Windows PowerShell'; to open the latter, type 'PowerShell' into the search bar and open as administrator. If Docker complains about you not belonging to the correct 'user group' after successful installation, follow the steps described here ) Open the file explorer and find a suitable folder to serve as working directory. This is where you will store the repository and installation files needed by the platform, as well as your output files (which may take up quite a bit of space!). Your working directory should be easy to find, stable, and have plenty of free space available. For instance C:/Users/yourusername (OneDrive, USB sticks, or your overly-cluttered desktop are not recommended \ud83d\udc40). When you are in your chosen working directory, right-click and choose \"Git Bash here\" (Windows). You can also directly use cd [path_to_working_directory] in a terminal with Git installed. Copy and paste the following line into the terminal (note that in some terminals such as Git Bash, you need to click the right mouse button to paste from the clipboard): git clone https://github.com/NorESMhub/noresm-land-sites-platform.git --config core.autocrlf=input This will download (= clone) the repository (= folder structure of files with version history) to your working directory. You can now see the folder and files in your file explorer. Once Git, Docker Desktop and the repository are in place, you don't have to do this again.","title":"0. Prerequisites (first time setup) \ud83c\udf31"},{"location":"user_guide/#1-start-the-container","text":"In the working directory where you have cloned the repository, open a terminal (e.g. by right-clicking and choosing \"Git Bash here\"; or use the one you already have open if you just did the first-time setup). Then write these commands (hit enter after each line) to get the container up and running: cd noresm-land-sites-platform docker-compose up If you get an error, make sure you are inside the folder containing the docker-compose.yaml file. Type ls and hit enter to list the files in the current folder. You can c hange d irectories by typing cd foldername to get inside foldername, and cd .. to move up to the parent folder. Tip! Press Tab to autocomplete a folder or file name after typing the first letter(s). If your browser tab ( localhost:8080 ) displays an error, it might be because the container is still being set up. Give it some time and refresh the page. The first time you execute this command, a lot of files will be downloaded. This might take half an hour or so depending on your internet connection. After this initial download, it will be much faster (<1min). Once the terminal messages stop, you can access the user interface by going to this address in a new browser tab: localhost:8080 .","title":"1. Start the container \ud83e\uddf0"},{"location":"user_guide/#2-inside-gui-set-simulation-settings","text":"In the graphical user interface (= GUI) at localhost:8080 you can easily set up and run model experiments. This interface has access to the Docker containers you started in step 1, and communicates with the models via the API . In the GUI, you will see a list and map of integrated sites, as well as a list of your cases (model experiments) once you create some. You can also run a simulation for a new site with your own input data . If you are doing a quick test with default settings, just pick a site and click create case , submit and then run . A default test case of 1 year should take ~10-20 mins. Attention. The first time you run a case, the model will download some global datasets of approx. 10GB total into data/shared . Expect your first simulation to take significantly longer! The GUI should look like this once you have chosen a site and have submitted and started to run a case: Figure 1: Screenshot from the GUI with a case created for the ALP1 site. Edited for readability.","title":"2. Inside GUI: Set simulation settings \u2699\ufe0f"},{"location":"user_guide/#21-choose-a-site","text":"...by clicking either a button or a point on the map! Or add a new site with your own data .","title":"2.1 Choose a site"},{"location":"user_guide/#22-download-site-data-button-optional","text":"For the integrated sites, the input data the models need is already available in the container. With the download site data button you can download it to somewhere else if you wish. We provide notebooks under notebooks/plot_input_data/ that you can open in Jupyterlab on localhost:8888 to familiarize yourself with some of the data that goes into a simulation, or as inspiration for making your own plots if you provided your own, improved input data. This is a good thing to do while your case is running.","title":"2.2 Download site data button (optional)"},{"location":"user_guide/#23-create-case","text":"With the create case button, you can look at and edit some model settings and parameters as you create a new case. To run a simulation, you need to set up a case which tells the model how to run. For more detailed information on what goes on in CLM and its coupler (which connects CLM to other model components), see this CIME user guide , but note that the NorESM modelling platform uses these commands and scripts more indirectly through the GUI and API. When you add a new site, the data upload and create case popup is combined. Once you have chosen a site, you get options to download site data (optional) and to create a new case. When you create a new case, you can change some model parameters as described below. Note that there are five tabs with different types of case and model settings, grouped into Case, Run Environment, CLM namelist, History fields, and FATES settings. This is not an exhaustive list of possible changes (by far), but give you easy access to some options in the different tabs. Under CLM Namelist settings, there is an Advanced box were experienced users can customise the CLM namelist by providing [parameter]=[value] input. All the boxes have default values for a quick but not especially realistic simulation. Note that you generally just need to touch four of the Run environment settings: STOP_N and STOP_OPTION to set the simulation length, and DATM_YR_START and DATM_YR_END to specify which years to use data from. If you change the starting year (DATM_YR_START), it's often best to change RUN_STARTDATE to the start of the same year. Screenshot of the pop-up triggered with the Create Case button. Notice the different tabs that give you access to different settings: case, run environment controlling simulation time, CLM namelist settings, history files controlling output files, and FATES parameters. Case settings Case name Free text. Specify a name for your case. This will be combined with a unique ID number generated randomly. Good case names say something about e.g. site, settings, or simulation period. For example: ALP1-10yr-default, ADV-1000yr-400ppm, FNS-200yr-notreepft Driver name Dropdown. 'nuopc' by default since 2021 Run environment Calendar Read-only. Calendar can be No-leap or Gregorian. Some climate input data (like our default GSWP3 data set) omits leap years. Gregorian is the 'normal' calendar including leap years. DATM_YR_START Integer (year). Starting year to loop data over. Example: If the input data spans 1900-2014, set = 2000 to tell the model to use the input data from 2000 onwards. DATM_YR_ALIGN Integer (year). Used to align the simulation year with the forcing data set. It specifies the simulation year corresponding to DATM_YR_START. For example, setting DATM_YR_ALIGN=DATM_YR_START means that the forcing calendar will be the same as the model calendar: the forcing for a given model year would be the forcing of the same year. This is appropriate when the model calendar is set up to span the same year range as the forcing data. By setting it to the same year as RUN_STARTDATE (below), the forcing in the first year of the run will be the forcing of year DATM_YR_START. DATM_YR_END Integer (year). Ending year to loop data over. For example: If the input data spans 1900-2010, you may set this to 2005 to tell the model to use the input data up to 2005. If you run a longer simulation than the span between YR_START and YR_END, the input will be looped. RUN_STARTDATE Run start date (yyyy-mm-dd); normally at the start of the same year as YR_START. Only used for startup or hybrid run types. STOP_N Integer. Sets the run length together with STOP_OPTION. It's the number of STOP_OPTION to simulate. E.g. STOP_N=5 and STOP_OPTION=ndays sets a simulation period of 5 days. STOP_OPTION Dropdown. This sets the run length together with STOP_N, and represents the unit of time (years, months, days, seconds, or model timesteps). E.g. STOP_N=5 and STOP_OPTION=ndays sets a simulation period of 5 days. STOP_DATE Integer. Alternative yyyymmdd date option that sets the run length with STOP_OPTION and STOP_N. Negative value implies that this alternative is not used. RUN_TYPE Read-only. Startup : a 'cold' start from bare ground, where the vegetation and climate is not in equilibrium and the model may produce unrealistic output unless it is run for a very long time (hundreds or thousands of years). Startup mode does not allow using spin-up files (='restart' files of an existing simulation where the vegetation and other conditions have reached a steady state). Use this mode for quick testing, or for making your own spin-up. Restart (only available for the legacy LSP version): continues running an existing case after it has been stopped. LND_TUNING_MODE Read-only. Land tuning mode. Tuning parameters and initial conditions for a CLM model version and meteorological forcing combination. CLM namelist simulation settings co2_ppmv Atmospheric CO2 concentration to use when co2_type is constant. fates_spitfire_mode If or how to use advanced fire behaviour with the SPITFIRE module. 0 : Simulations of fire are off, 1 : use a global constant lightning rate found in fates_params, 2 : use an external lightning dataset, 3 : use an external confirmed ignitions dataset (not available through standard CSEM dataset collection), 4 : use external lightning and population datasets to simulate both natural and anthropogenic ignitions. Read more in the FATES documentation use_bedrock True/false. When true (default), a data set overwrites the CLM default soil depth. If present on surface dataset, use depth to bedrock information to specify spatially variable soil thickness. If not present, use bottom of soil column (nlevsoi). Read more in Brunke et al.2016 Advanced Box for coding in additional CLM namelist changes. See the CLM user guide History files By default, the model records output in one tape (hist_fincl1), as one (hist_mfilt=1) average (hist_avgflag_pertape=A), monthly (hist_nhtfrq=0) value, for a subset of variables (Active=T in this list ). Each column in the History files tab corresponds to a history tape, which is a series of files created for the simulation period. If you want output to be recorded for additional variables or at different time steps, you can modify the first column or fill in additional columns to add history tapes. NB! The list of output variables listed in the CTSM documentation may be outdated (because both FATES and CLM develop fast and the documentation and stable versions may lag behind the one we use). The LSP version 1 uses this list of FATES output variables FatesHistoryInterfaceMod.F90 (Warning: code & jargon-heavy text). use_default='inactive' means it is not included in the history tape by default. It can be activated by including the variable name in the hist_fincl fields in the GUI. If you want to run the model without saving any output, set hist_mfilt=0 in the first column. By modifying additional columns, you add tapes (series of files) with e.g. different output variables, recorded at e.g. its maximum value per day. Remember to change hist_mfilt to store the output. Note that some FATES vegetation demographic output is only accessible in a long string format instead of in the default lat-lon grid. FATES settings You can remove or modify Plant Functional Types (PFTs) by checking/unchecking PFTs and typing in custom values for a subset of parameters. The full list of parameters is in the FATES model code . Index no. Plant Functional Type 1 broadleaf_evergreen_tropical_tree 2 needleleaf_evergreen_extratrop_tree 3 needleleaf_colddecid_extratrop_tree 4 broadleaf_evergreen_extratrop_tree 5 broadleaf_hydrodecid_tropical_tree 6 broadleaf_colddecid_extratrop_tree 7 broadleaf_evergreen_extratrop_shrub 8 broadleaf_hydrodecid_extratrop_shrub 9 broadleaf_colddecid_extratrop_shrub 10 arctic_c3_grass 11 cool_c3_grass 12 c4_grass","title":"2.3 Create case"},{"location":"user_guide/#start-building-your-case-with-the-submit-button","text":"Once you click submit , the case will appear in a list of cases with the case ID, status, creation date, grid information, component set, a link to view the settings you specified, and some buttons with more options. Pay attention to the status, which will transition from pending to ready when the case has been built.","title":"Start building your case with the \u00b4SUBMIT\u00b4 button"},{"location":"user_guide/#3-run-your-simulations","text":"Once the case is ready, you can start the simulation with the run button. There are also buttons to download the output when the run is finished, to copy the case settings as a template to create a new case, and to delete the case. Depending on how long you asked the model to run for, and on your hardware, the simulation can take some time \u23f3. On a regular laptop, one year of simulation of a single site (= gridcell) might take ~5-20 minutes. It may help to not run other heavy programs simultaneously (like GIS, Photoshop or 1000 browser tabs \ud83d\udc40). The Docker container you started in step 1 is performing the simulation using your local computer. If you are running more or longer simulations than your computer can handle, you may want to look at our alternatives for remote simulations . While you wait for the simulation to finish, you may like to inspect the input data more closely to understand what data drives the model. Open a new browser tab and go to the Docker container at localhost:8888 . Navigate to the notebooks/plot_input_data/ folder and go through the notebooks there. They will plot some of the input data for your site that forces the atmospheric model component and provides land surface and soil information. Soon your simulations will be finished! \ud83c\udf89 (Hint: if your case seems to be running forever, try to refresh the webpage! Sometimes it gets stuck.) If you got an error message somewhere along the way, please head over to our GitHub and write an issue describing what happened, what machine you are on (mac/windows/HPC etc.), and copy in the error message and any other relevant information. Progress messages will be printed in the terminal you started the container from. (If you closed the terminal window already, you can see it in Docker desktop by clicking the running container stack.) Output will be stored as monthly averages by default, or at whatever time intervals you set in the history files tab when you created the case.","title":"3. Run your simulations \ud83d\udc69\u200d\ud83d\udcbb"},{"location":"user_guide/#4-look-at-your-output","text":"Model output files are easily accessed in Jupyter lab ( localhost:8888 ) under the resources/cases/<case_id>/archive/lnd/hist/ folder. The Jupyter server fetches the files locally in your copy of the noresm-land-sites-platform repository under resources/cases/<case-id>/archive . In JupyterLab, we have prepared some notebooks (text, code & output documents) for combining output files, creating some basic plots, and comparing model output to observations for some of the sites. Once you open JupyterLab, you will see some folders. Nagivate to the notebooks/ folder and open the combine_nc_files.ipynb notebook. If your simulation recorded one history tape (see explanation above) with monthly average values for a one-year simulation, you should find 12 .nc files in the resources/cases/<case_id>/archive/lnd/hist/ folder. It is generally a good idea to combine these files into one, and the combine_nc_files.ipynb notebook will guide you through doing this. When the history files are combined, you can go on to the notebooks/model_output_analysis folder to see additional notebooks. They will guide you through some ways of looking at the model output and comparing it to published data for the sites where data is available. The notebooks can be modified (use File -> Save Notebook As... to save your own version) with your own code and text. The code cells are read as Python code by default. Run/execute notebook cells with e.g. Ctrl+Enter after clicking it with you cursor. This works both for text (Markdown) and code (Python) cells. You can also use the clickable icons at the top of the notebook, like the play button for running a cell or + for insering a new cell. There are many other ways to analyse the data, and much more model output available! Output can alternatively be opened in Panoply, which is included for at http://localhost:5800/ when containers are running. Panoply is a useful tool to explore the data and get an overview of the available output variables. If you prefer to work with the output outside the NorESM-LSP, output data can also be downloaded to another location with the Download Data button in the GUI. The output NetCDF files can be opened in Panoply locally, or with netCDF-handling packages in e.g. Python or R or on your local computer.","title":"4. Look at your output \ud83d\udcc8"},{"location":"user_guide/#5-close-the-container","text":"NB! The container will continue to run unless you stop it. When you are finished with simulations and output processing and downloading things you might need offline, go back to your terminal and press Ctrl+c . If you closed the terminal window, you can open a new one, go to the repository ( cd noresm-land-sites-platform/ ) and type in docker-compose down . Alternatively, open Docker desktop, find the containers tab, and shut them down them with the stop button.","title":"5. Close the container"},{"location":"user_guide/#model-performance-and-best-practices","text":"While the LSP makes is easy to perform a simulation, there are many pitfalls to consider when setting up model experiments and interpreting the results. To get realistic results from simulations, three elements must be correct: model structure, model parameterization, and the external forcing data. Getting all three right is difficult even for experienced modellers, but you can get far by being curious and careful in your interpretations. Ask yourself, what can the model actually do (which processes are included in the model structure)? What do the current parameters represent (e.g. for default Plant Functional Types, mortality rates, growth allometry)? Is the forcing data realistic for my site? If you want to improve you model experiment, it's vital to consider your purpose. For example, do you want the output to be as similar as possible to an observed data set? If so, you might tune model parameters and adjust your input (forcing) data. The risk is that you \"get the right result for the wrong reason\", but that might be acceptable depending on your purpose and if you don't extrapolate. Alternatively, one might risk getting completely unrealistic model output even when all parameters and forcing data are correct. The model may lack an important process that produces a result in real life. Model calibration, validation and tuning should therefore be done with great care and according to your purpose of modelling. To learn more about the models and land surface modelling, check out our external resources page . Understanding what you don't know is the first step!","title":"Model performance and best practices"},{"location":"user_guide/#advanced-customisation","text":"If you need customisation of data, model code, or case setup beyond what is possible through the graphical user interface and JupyterLab, you may access the containers or API directly. You can also use the platform remotely, e.g. via SSH tunnelling . If you have (or create) an .env file in the project root with HOST_USER set in it, use this: docker-compose exec -u <host_user_value> api bash Otherwise, use this: docker-compose exec api bash This will open a terminal in /ctsm-api. The model is in /ctsm-api/resources/model. Cases created with the api go in /ctsm-api/resources/cases, and their data in /ctsm-api/resources/data/ . The build, run, and archive folders are put inside the case folder. Shared data goes in /ctsm-api/resources/data/shared.","title":"Advanced customisation"},{"location":"user_guide/#reproducibility","text":"To make your simulations reproducible by others, e.g. for a thesis or scientific paper, note down the version of the NorESM-LSP and save these three directories that have been created under resources/ in your working directory (e.g. C:/Users/yourusername/noresm-land-sites-platform/resources): the case folder, i.e. \u00b4resources/cases/casename\u00b4 the case input data, i.e. \u00b4resources/data/casename\u00b4 code modifications in overwrites, i.e. \u00b4resources/overwrites\u00b4 You could also simply save the whole 'resources' folder (and get some redundant files). To recreate an old simulation, the LSP might need to be reinstalled. Old case folders can of course be copied into new versions of the LSP, but if there are changes to e.g. python libraries, model code or other software we depend on, there might be errors or slight differences in the output if the case is re-run. To install a specific version, go to GitHub , find the correct version tag/release tag, and clone or download the code from that version. Once the correct version of the repository is in place, copy and pase in the three folders listed above. Make sure the folder structure is the same. Then, bring up the containers again with docker-compose up and voil\u00e0 !","title":"Reproducibility"},{"location":"user_guide/#when-and-how-to-cite-the-noresm-lsp-models-and-data","text":"If you end up publishing your model experiments, e.g. in a thesis or scientific paper, you need to consider citations, acknowledgements, and authorship invitations carefully. To cite the NorESM-LSP software, see the Contributing and About . When you publish model experiments, you also need to properly cite and acknowledge the model framework: See the licences of NorESM , CLM , FATES . In the Acknowledgements section, it is common practice to add funding information of the models that you use (e.g. the U.S. National Science Foundation for CLM, NGEE-Tropics for FATES). The main publications for each model should also be cited in the main text. If you use observational data, e.g. from the Vestland Climate Grid sites or another integrated site, make sure to look at the licences, rights and conditions attached to those data! Following international standards for research ethics, authorship invitations should be given based on \"substantial contributions to conception and design, acquisition of data, or analysis and interpretation of data\", among other things.","title":"When and how to cite the NorESM-LSP, models, and data"},{"location":"user_guide/#troubleshooting","text":"Please help us by reporting errors and questions on our issues page . Things you can try yourself include \"switching it off and on again\" by stopping, deleting, and reinstalling everything carefully. See instructions to uninstall below, and carefully follow steps 6 and 7 from the setup guide before you bring the containers up again with docker-compose up .","title":"Troubleshooting"},{"location":"user_guide/#updating-and-uninstalling","text":"To install updates, download the new version of the code and container images by typing git pull followed by docker-compose pull into a terminal from your local clone of the repository. To uninstall, open a terminal in your working directory and enter your local clone of the repository (remember ls = list files, cd =change directory). Right-clicking in your working directory file explorer should give you options to open Git Bash or another terminal. If the container (or another process) is running in your terminal, you can stop it with Ctrl+c , or with docker-compose down if you see .../noresm-land-sites-platform$ . To remove the repository, you can type rm -r noresm-land-sites-platform in your working directory. If it complains about permissions you may need sudo in front, and you can use -rf instead of -r. This might require administrator rights to your computer. NB! If you delete the whole repository like this, your existing cases and output data will also be deleted. To delete all Docker containers, images, and other files, also ones in use, use the command docker system prune -a . NB! If you do this, you will need to download all the files again if you want to use the LSP again. It is also possible to delete everything manually in Docker desktop (check containers, images, and volumes tabs), and to delete the repository manually from your working directory. Docker desktop can be uninstalled like any other program, e.g. via you pc's settings. Please help us by reporting errors and questions on our issues page .","title":"Updating and uninstalling"}]}